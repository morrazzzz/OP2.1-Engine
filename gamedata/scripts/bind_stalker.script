-- В ОП-2.1 Это биндер неписей, не актора! Бывший xr_motivator. Биндер актора теперь называется bind_actor!

function init(npc)
    npc:bind_object(stalker_binder(npc))
end

local particles = {}

class "stalker_binder" (object_binder)

function stalker_binder:__init (obj) super(obj)
    self.id = self.object:id()
	self.loaded = false
	self.prev_ammo = -1

	self.particles = {}
	self.rot_time = 65535
end

function stalker_binder:extrapolate_callback(cur_pt)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "extrapolate_callback")
		self.st.move_mgr:extrapolate_callback(self.object)
	end

	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function stalker_binder:reinit()
    object_binder.reinit(self)
    --printf("stalker_binder:reinit(): self.object:name()='%s'", self.object:name())

    db.storage[self.id] = {followers = {}}
    self.st = db.storage[self.id]

	self.timer1000 = 0
	
    --' Создание менеджера контроля положений тела
	self.st.state_mgr = state_mgr.bind_manager(self.object)
	self.st.move_mgr = move_mgr.move_mgr(self.object)
	self.st.move_mgr:initialize()
end

function stalker_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end
	printf("stalker_binder:net_spawn(): self.object:name()='%s'", self.object:name())
  
	self.started = true
	db.add_obj(self.object)
	self.rot = self.rot_time <= amk.game_hours()

	self.object:set_patrol_extrapolate_callback(stalker_binder.extrapolate_callback, self)
	self.object:set_callback(callback.hit, stalker_binder.hit_callback, self)
	self.object:set_callback(callback.death, stalker_binder.death_callback, self)
	self.object:set_callback(callback.use_object, stalker_binder.use_callback, self)
	self.object:set_callback(callback.on_object_hit, stalker_binder.new_hit_callback, self)

    --' Загрузка историй для лагеря.
	if self.loaded == false then
		local char_ini = self.object:spawn_ini() or ini_file("scripts\\dummy.ltx")
		xr_info.loadInfo(self.object, char_ini)
	end

	if not self.object:alive() then
		return true
	end

	--' Говорим всем, что аномалий не существует, обход аномалий задается динамически в amk_anoms
    local manager = self.object:motivation_action_manager()
    manager:remove_evaluator(stalker_ids.property_anomaly)
    manager:add_evaluator(stalker_ids.property_anomaly, property_evaluator_const(false))

    xr_sound.load_sound(self.object)
	xr_gulag.setup_gulag_and_logic_on_spawn(self.object, self.st, sobject, modules.stype_stalker, self.loaded)

	amk.on_npc_spawn(self.object)
    amk.on_net_spawn(self.object)

    local particle_param = utils.cfg_get_string(config, self.object:section(), "bones_particles", nil, false, false, nil)
	if particle_param and config:section_exist(particle_param) then
		local tmp = amk.parse_ini_section_to_array(config,particle_param)

		for k,v in pairs(tmp) do
			local t = amk.parse_ini_section_to_array(config, v)
			t.obj = self.object
			if not t.stop_on_death or self.object:alive() then
				play_particle(self.object, t)
			end
		end
	end

	-- сохранение отношений в Волне
	if level.name() == "zaton" then
		self.npc_goodwill = self.object:goodwill(db.actor)
		if 0 <= self.npc_goodwill and self.npc_goodwill <= 1000 then
			self.npc_goodwill = 1000
		end
		self.com_goodwill = relation_registry.community_goodwill(self.object:character_community(), db.actor:id())
		--console:execute("load ~~~ self.object:character_community(): "..self.object:character_community())
		--console:execute("load ~~~ self.com_goodwill: "..self.com_goodwill)
	end
		
  return true
end

function stalker_binder:update(delta)
    if amk.oau_watchdog ~= 0 then
        if not screen:is_paused() then
            say("detectors\\da-2_beep1")
        end
        abort("Watchdog "..amk.oau_watchdog..".Reason "..amk.oau_reason)
    end
	
    object_binder.update(self, delta)
	self.alive = self.object:alive()

	-- Первый апдейт
	if self.started then
        if self.alive then
			trade.first_update(self.object)
		else
			death_manager.drop_manager(self.object):create_release_item()
        end
		self.started = nil
    end

	-- Партиклы
    if particles[self.id] and #particles[self.id] > 0 then
        for kk,vv in pairs(particles[self.id]) do
            self.particles[#self.particles+1] = amk_particle.amk_particle(vv)
            table.remove(particles[self.id],kk)
        end
    end
    if #self.particles > 0 then
        for kk,vv in pairs(self.particles) do
            if vv then
                if vv:is_finished() then
                    self.particles[kk] = nil
                else
                    vv:update(delta)
                end
            end
        end
    end

	-- Апдейт 1 секунда
	if self.timer1000 < time_global() then
		self.timer1000 = time_global()+1000

        if self.object:relation(db.actor) == game_object.enemy and self.alive and self.object.health > 0.01 then
            if self.object:see(db.actor) then
                amk.enemy_see_actor(self.object,"npc")
            end
            if db.actor:alive() and db.actor:see(self.object) then
                amk.actor_see_enemy(self.object,"npc")
            end
        end

		sr_light.check_light(self.object)
    end

	-- Калбек на выстрел по ГГ
	if self.alive then
		local wpn = utils.wpn_info_get(self.object)
		if wpn["ammo"] then
			local enemy = self.object:best_enemy()
			if enemy and enemy:id() == db.actor:id() and self.object:see(db.actor) and self.prev_ammo > wpn["ammo"] then
				amk.npc_shot_actor(self.object)
			end
		end
		self.prev_ammo = wpn["ammo"] or 0
	end

	if self.alive then
		self.st.state_mgr:update() 	--' Апдейт менеджера состояний тела
		xr_sound.update(self.object)

		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
	else
		self.object:set_tip_text_default()
		
		if self.st.state_mgr then
			self.st.state_mgr = nil
		end

		-- гниение
		if self.rot then
			self:rotting()
		end
	end

	xrs_ai.npc_update(self)
	rx_ai.npc_update(self.object, self.st)
end

function stalker_binder:net_destroy()
  --printf("stalker_binder:net_destroy(): self.object:name()='%s'", self.object:name())
	xrs_ai.npc_net_destroy(self.object)
	rx_ai.npc_switch_offline(self.object)
	amk.on_npc_go_offline(self.object)

	if #self.particles > 0 then
		for kk,vv in pairs(self.particles) do
			if not vv:is_finished() then
				vv:stop()
				self.particles[kk] = nil
			end
		end
	end

	if self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy", self.object)
	end

	db.del_obj(self.object)
	db.storage[self.id] = nil

	self:clear_callbacks()
	self.object:set_callback(callback.use_object, nil)

	-- Труп исчез из-под носа гг, видимо, воскрес
	if self.rot_sound then
		self.rot_sound = nil
		db.rotting = db.rotting-1
	end

	object_binder.net_destroy(self)
	
	-- Очистка рестрикторов AMK
	local sobj = server_object(self.id)
	if sobj then
		netpacket:modify(sobj, "dynamic_in_restrictions", {})
	end
end

function stalker_binder:clear_callbacks()
	self.object:set_patrol_extrapolate_callback(nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.on_object_hit, nil)
end

function stalker_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	kostya_dialog.kuv_hit(who)
	akill.on_npc_hit(self, obj, amount, local_direction, who, bone_index)

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat_ignore then
		xr_logic.issue_event(self.object, self.st.combat_ignore, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.combat then
		xr_logic.issue_event(self.object, self.st.combat, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	
	if amount > 0 then
		printf("HIT_CALLBACK: %s amount=%s bone=%s", obj:name(), amount, tostring(bone_index))
		sr_territory.issue_event(self.object, "hit_callback", obj, amount, local_direction, who, bone_index)
		xr_wounded.hit_callback(self.id)
	end

	blowout_scheme.hit_callback(obj)
	rx_ai.npc_hit(obj, amount, local_direction, who, bone_index, self.object)
	amk.on_npc_hit(obj, amount, local_direction, who, bone_index)
end

-- новый хит
function stalker_binder:new_hit_callback(who, wpn, ammo, bone_index, bone_name, amount, hit_type)
--	log(string.format("object: [%s] who: %s, wpn: %s, ammo: %s, bone_index: %d, bone_name: %s, amount: %f, hit_type: %d", self.object:section(), who and who:id() or "nil", wpn and wpn:section() or "nil", ammo and ammo or "nil", bone_index, bone_name, amount, hit_type))
	akill.new_hit(self.object, who, wpn, ammo, bone_index, bone_name, amount, hit_type)
end

function stalker_binder:death_callback(victim, who)
	kostya_dialog.kuv_hit(who)
	xrs_ai.npc_death_callback(self.object)
	rx_ai.npc_death(self.object, who)
	
	if who:id() == db.actor:id() then
		xr_statistic.addKillCount(self.object)
		akill.test_pistols_death()
		bind_soul_cube.add_soul()
	end

	if self.st.death then
		xr_logic.issue_event(self.object, self.st.death, "death_callback", victim, who)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

	sr_territory.issue_event(self.object, "death_callback", victim, who)
	sr_light.check_light(self.object)
	smart_terrain.on_death(self.id)
	amk.on_npc_death(victim, who)
	death_manager.drop_manager(self.object):create_release_item()

	self:clear_callbacks()

	--' Наносим небольшой импульс вперед.
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	h.direction = db.actor:position():sub(self.object:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

	if #self.particles > 0 then
		for kk,vv in pairs(self.particles) do
			vv:on_death()
		end
	end

	local community = self.object:character_community()
	if community == "zombied" or community == "monolith" or community == "arena_enemy" then
		return
	end
	actor_stats.remove_from_ranking(self.id)
end

function stalker_binder:use_callback(obj, who)
	if self.object:alive() then
		xr_use.notify_on_use(obj, who)
		
		if self.st.active_section then
			xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
		end
	else
		_G.Treasure:use(self.object)
		
		hotkeys.on_use(obj, who)
		
		if self.object:name() == "rostok_dead_stalker_0000" then
			give_info("acv_vandal")
		end
	end
	
	if string.find(self.object:section(),"zombie") then
		sak.zombie_checkup()
	end

	fly.returner_clear_pos()
	amk.on_use(obj, who)
end

function stalker_binder:reload(section)
	object_binder.reload(self, section)
end

function stalker_binder:net_save_relevant()
	return true
end

function stalker_binder:save(packet)
	printf("stalker_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
	dialog_manager.save(self.object, packet)

	if self.rot_time == 65535 and not self.object:alive() then
		-- помер, либо гг нашел труп - выставляем время гниения
		self.rot_time = amk.game_hours()+24
	end
	packet:w_u16(self.rot_time)
end

function stalker_binder:load(reader)
	printf("stalker_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	self.loaded = true

	if reader:r_eof() then
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end

	xr_logic.load_obj(self.object, reader)
	self.npc_script_version = server_object(self.id).script_version
	dialog_manager.load(self.object, reader, self.npc_script_version)
	self.rot_time = reader:r_u16()
end

function stalker_binder:rotting()
	self.pos = self.object:position()
	
	if self.pos:distance_to(db.actor:position()) < 3 then
		if not self.rot_sound then
			self.rot_sound = sound_object([[anomaly\rot_flies]])
			db.rotting = db.rotting+1
		end
		
		if self.rot_sound:playing() then 
			self.rot_sound:set_position(self.pos)
		else
			-- мухи не летают в дождь, ночью и во время Выброса
			if level.rain_factor() < 0.05 and xr_conditions.is_day() and not amk.has_variable("blowout") then
				self.rot_sound:play_at_pos(self.object, self.pos)
			end
		end
	else
		if self.rot_sound then
			self.rot_sound = nil
			db.rotting = db.rotting-1
		end
	end
end

-- Эвалюаторы, которые имеют высший приоритет, и, соответственно, перебивают остальные скрипты собой
function addCommonPrecondition(action)
	--action:add_precondition(world_property(xr_evaluators_id.reaction,false))
	action:add_precondition(world_property(xr_evaluators_id.stohe_meet_base + 1,false))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base + 0,  false))
	action:add_precondition(world_property(xr_evaluators_id.chugai_heli_hunter_base, false))
	action:add_precondition(world_property(xr_evaluators_id.abuse_base, false))
	action:add_precondition(world_property(blowout_scheme.evid_outside, false))
	action:add_precondition(world_property(blowout_scheme.evid_blowout, false))
	action:add_precondition(world_property(blowout_scheme.evid_preblowout, false))
	action:add_precondition(world_property(blowout_scheme.evid_anomaly, false))
	action:add_precondition(world_property(watcher_act.evid_see_stuff, false))

	xrs_ai.addCommonPrecondition(action)
	rx_ai.addCommonPrecondition(action)
end

function play_particle(obj,params)
	local id = obj:id()
	if not particles[id] then
		particles[id] = {}
	end
	table.insert(particles[id], params) 
end
