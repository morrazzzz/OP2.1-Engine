-- Биндер script_trader (Сидор и Василий)
function bind(obj)      
	obj:bind_object(trader_binder(obj)) 
end 

class "trader_binder" (object_binder) 

function trader_binder:__init(obj) super(obj) 
	self.loaded = false
end 

function trader_binder:reload(section) 
	object_binder.reload(self, section) 
end 

function trader_binder:reinit() 
	object_binder.reinit(self) 

	db.storage[self.object:id()] = { }
	self.st = db.storage[self.object:id()] 
	self.object:set_callback(callback.hit, self.hit_callback, self) 
	self.object:set_callback(callback.use_object, self.use_callback, self)
end 

function trader_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then 
		return false 
	end

	self.started = true
	db.add_obj(self.object) 
	xr_gulag.setup_gulag_and_logic_on_spawn(self.object, self.st, sobject, modules.stype_mobile, self.loaded)

	if self.object:is_talk_enabled() then
		self.object:set_tip_text("character_use")
	else
		self.object:set_tip_text("")
	end

	return true 
end 

function trader_binder:update(delta)
	object_binder.update(self, delta) 

	-- Первый апдейт
	if self.started then
		trade.first_update(self.object)
		self.started = nil
	end

	if self.st.active_section then 
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta) 
	end 
end 


function trader_binder:hit_callback(obj, amount, local_direction, who, bone_index) 
--	printf("HIT_CALLBACK: [%s] amount[%s]", obj:name(), amount)

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
end 

-- Cхема on_use не подключена для класса script_trader для обратной совместимости
function trader_binder:use_callback(obj, who)
	fly.returner_clear_pos()
	safe_StealManager.CheckAndSetDialogs(obj, who)
end

function trader_binder:net_destroy()
	self.object:set_callback(callback.hit, nil) 
	self.object:set_callback(callback.use_object, nil)

	if self.st.active_scheme then 
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy") 
	end 

	db.del_obj(self.object) 
	db.storage[self.object:id()] = nil 

	object_binder.net_destroy(self) 
end 

function trader_binder:reload(section) 
	object_binder.reload(self, section) 
end

function trader_binder:net_save_relevant()
	return true
end 

function trader_binder:save(packet)
	printf("trader_binder:save(): self.object:name()='%s'", self.object:name())          
	object_binder.save(self, packet) 

	xr_logic.save_obj(self.object, packet) 
end 

function trader_binder:load(reader) 
	self.loaded = true 

	printf("trader_binder:load(): self.object:name()='%s'", self.object:name()) 
	object_binder.load(self, reader) 

	if reader:r_eof() then 
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end 

	xr_logic.load_obj(self.object, reader)
end
