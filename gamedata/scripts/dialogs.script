function allow_break_dialog(first_speaker, second_speaker, id)
	if second_speaker:profile_name() == "osoznanie" then
		return false
	end

	return true
end


function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end
function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	db.storage[second_speaker:id()].punch.enabled = true
end

function get_money_then_leave(first_speaker, second_speaker)
	db.storage[first_speaker:id()].meet.enabled = false
	db.storage[first_speaker:id()].robber.enabled = true
end

function is_wounded(first_speaker, second_speaker)
    if db.storage[first_speaker:id()].wounded ~= nil and
       db.storage[first_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end

	return xr_wounded.is_wounded(first_speaker)
end
function is_opp_wounded(first_speaker, second_speaker, dialog_id)
    if db.storage[second_speaker:id()].wounded ~= nil and
       db.storage[second_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end
	return	xr_wounded.is_wounded(second_speaker)
end
function is_not_wounded(first_speaker, second_speaker)
	return not this.is_wounded(first_speaker, second_speaker)
end
function is_not_opp_wounded(first_speaker, second_speaker)
	return not this.is_opp_wounded(first_speaker, second_speaker)
end
function actor_have_medkit(first_speaker, second_speaker)
	return first_speaker:object("medkit") ~= nil or
		   first_speaker:object("medkit_army") ~= nil or
		   first_speaker:object("medkit_scientic") ~= nil
end
function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end
function transfer_medkit(first_speaker, second_speaker)
	if first_speaker:object("medkit") ~= nil then
		transfer(second_speaker, "medkit", "out")
	elseif first_speaker:object("medkit_army") ~= nil then
		transfer(second_speaker, "medkit_army", "out")
	elseif first_speaker:object("medkit_scientic") ~= nil then
		transfer(second_speaker, "medkit_scientic", "out")
	else
		-- Не везде в диалогах стоит проверка на наличие аптечки, это затычка от вылета, если у ГГ совсем нет аптечек
		create("medkit_scientic",xyz(0,0,0),0,0,second_speaker:id())
	end

	--' Тут надо анлочить аптечку для использования.
	xr_wounded.unlock_medkit(second_speaker)
	
	if second_speaker:relation(first_speaker) ~= game_object.enemy then
		second_speaker:set_relation(game_object.friend, first_speaker)
		first_speaker:change_character_reputation(10)
	else
		first_speaker:change_character_reputation(-10)
		xr_wounded.help_wounded(second_speaker)
	end

	--xr_wounded.help_wounded(second_speaker)
	kostya_dialog.doktor_lekar1_money()
	kostya_dialog.doktor_lekar1_have()
end
function transfer_bandage(first_speaker, second_speaker)
	transfer(second_speaker, "bandage", "out")
	second_speaker:set_relation(game_object.friend, first_speaker)
	kostya_dialog.doktor_lekar1_money()
	kostya_dialog.doktor_lekar1_have()
end
function kill_yourself(npc, actor)
	npc:kill(actor)
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if id ~= nil then
--		printf("*DIALOGS*: dialog_allowed: %s", id)
	else
--		printf("*DIALOGS*: dialog_allowed: nil")
	end
	if db.storage[victim:id()].actor_dialogs ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_dialogs) do
			if v == id then return true end
		end
	end
	return false
end
function dialog_not_disable(object, victim, id)
	if id ~= nil then
--		printf("*DIALOGS*: dialog_disable:%s", id)
	else
--		printf("*DIALOGS*: dialog_disable:nil")
	end
	if db.storage[victim:id()].actor_disable ~= nil then
		for k,v in pairs(db.storage[victim:id()].actor_disable) do
			if v == id then return false end
		end
	end
	return true
end

function allow_wounded_dialog(object, victim, id)
	if db.storage[victim:id()].wounded == nil then
		return false
	end	
	if db.storage[victim:id()].wounded.help_dialog == id then
		return true
	end
	return false	
end


-----------------------------------------------------------------------------------
-- LEVELS
-----------------------------------------------------------------------------------
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	return level.name() == "l03_agroprom_ai2" or level.name() == "l03_agroprom"
end

-----------------------------------------------------------------------------------
-- Relation functions
-----------------------------------------------------------------------------------
function is_friend(first_speaker, second_speaker)
	return first_speaker:relation(second_speaker) == game_object.friend
end

function is_not_friend(first_speaker, second_speaker)
	return not is_friend(first_speaker, second_speaker)
end

function become_friend(first_speaker, second_speaker)
	first_speaker:set_relation(game_object.friend, second_speaker)
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------
function actor_in_dolg(actor, npc)
	if db.actor then
		return db.actor:character_community() == "actor_dolg"
	end
	return false
end
function actor_not_in_dolg(actor, npc)
	return not actor_in_dolg(actor, npc)
end
function actor_set_dolg(actor, npc)
	printf("ACTOR NOW IN [DOLG] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor_dolg", 0, 0)
	end
	return true
end
function actor_clear_community(actor, npc)
	printf("ACTOR NOW IN [NEUTRAL] COMMUNITY")
	if db.actor then
		db.actor:set_character_community("actor", 0, 0)
	end
	return true
end

-----------------------------------------------------------------------------------
-- Money functions
-----------------------------------------------------------------------------------
function has_2000_money(first_speaker, second_speaker)
	return first_speaker:money() >= 2000
end

-- Счетчик количества вызовов диалога. Возвращает count раз true, затем false. 
-- должны быть прописаны поршни: "portion1, portion2...portion|Count|)" 
function dialog_count(portion, count)
	local pname = ""
	for i=1,count do
		pname = portion..tostring(i)
		if not has_info(pname) then 
			give_info(pname)
			return true
		end
	end
	return false
end

-- проверка лимита. возвращает true если все поршни выданы.
function dialog_is_enough(portion, count)
	local pname = ""
	for i=1,count do
		pname = portion..tostring(i)
		if not has_info(pname) then
			return false
		end
	end
	return true
end
