-- дополнительные функци для Главного Меню
local f = getFS()

-- Имя пользователя
function GetUserName()
	local flist = f:file_list_open_ex("$game_settings$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*.usr")
	if flist:Size() > 0 then
		local str = string.sub(flist:GetAt(0):NameFull(), 1, -5)
		-- Раскодируем строку
		return str:gsub("_(%x%x)", function (h) return string.char(tonumber(h, 16)) end)
	else
		return old_user_name()
	end
end

function SetUserName(str)
	if not ( str and #str > 0 ) then return end
	
	str = str:trim()
	if #str == 0 then
		log("SetUserName: Incorrect user name!")
		return
	end
	-- Перекодируем для возможности сохранения "запрещённых" символов и заглавных букв
	str = str:gsub(".", function(s) return string.format("_%02X", string.byte(s))  end)

	local f_new = f:update_path("$game_settings$", str..".usr")
	local flist = f:file_list_open_ex("$game_settings$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*.usr")
	if flist:Size() > 0 then
		local f_old = f:update_path("$game_settings$", flist:GetAt(0):NameFull())
		if f_old ~= f_new then
			f:file_rename(f_old, f_new, true)
		end
	else
		local f_old = f:update_path("$game_settings$", "game_setup.ltx")
		f:file_copy(f_old, f_new)
	end
end

-- чтение текста опций
function GetUserText(handler, option)
	local flist = f:file_list_open_ex("$game_settings$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*."..option)
	
	if flist:Size() > 0 then
		handler:SetText(string.sub(flist:GetAt(0):NameFull(), 0, -5))
	else
		handler:SetText("")
	end
	
	return handler:GetText()
end

-- сохранение текста опций
function SetUserText(previous, new, option)
	local f1 = f:update_path("$game_settings$", "game_setup.ltx")
	local f2

	if previous ~= "" then
		f2 = f:update_path("$game_settings$", previous.."."..option)
		f:file_delete(f2)
	end
	
	-- чистим все лишнее
	if new ~= "" then
		local t = {}
		for s in string.gfind(new, "[%w_%-%.]+") do
			table.insert(t, s)
		end
		new = table.concat(t, " ")
		f2 = f:update_path("$game_settings$", new.."."..option)
		f:file_copy(f1, f2)
	end
end

-- покупка квестовых предметов
function buy_quest_item()
	local flist = f:file_list_open_ex("$game_settings$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*.buy")
	if flist:Size() == 0 then return end

	fname = flist:GetAt(0):NameFull()
	local buy_item = string.sub(fname, 0, -5)
	local ini = config
	local god_buy = false
	
	if not ini:section_exist(buy_item) then
		sms("Предмет \""..buy_item.."\" не найден.", nil, "nano", 30000)
		return
	elseif db.actor:money() < 200000 then
		sms("Для покупки недостаточно денег.", nil, "nano", 30000)
	elseif db.god.u[2] and rx_utils.read_from_ini(ini, buy_item, "cheat_item", false, 0) then
		sms("Этот предмет нельзя купить через меню игры.", nil, "nano", 30000)
	elseif not db.god.u[2] and is_excluded_item(buy_item) then
		sms("Через меню игры можно покупать только квестовые предметы.", nil, "nano", 30000)
	else
		disable_info("mm_opt")
		lost_money(200000)
		got(buy_item, 1)
		
		if db.god.u[2] and is_excluded_item(buy_item) then
			db.god.c[2] = db.god.c[2]+1
		else
			local info
			for i =1,3 do
				info = "acv_halavshic"..tostring(i)
				if not has_info(info) then 
					give_info(info)
					break
				end
			end
		end
	end

	local f1 = f:update_path("$game_settings$", fname)
	f:file_delete(f1)
end

function is_excluded_item(item)
	local unique_items = {"wpn_fot", "wpn_kuvalda"}
	for i, se_name in ipairs(unique_items) do
		if se_name == item then
			return false
		end
	end
	
	local excluded_items = {"amk_transmutator", "teleportator", "anom_egg", "arhara_obman", "bioradar", "amulet", "detector_", "^nv_", "af_", "wpn_", "ammo_", "grenade_", "_tele", "zone_", "zone_docs", "zonedocs"}

	for i, se_name in ipairs(excluded_items) do
		if string.find(item, se_name) then
			return true
		end
	end

	local ini = config
	return
		ini:line_exist(item, "teleport") or
		(ini:line_exist(item, "class") and ini:r_string(item, "class") == "O_INVBOX") or
		(ini:line_exist(item, "class") and ini:r_string(item, "class") == "E_STLK") or
		(ini:line_exist(item, "script_binding") and string.find(ini:r_string(item, "script_binding"), "bind_monster")) or
		(ini:line_exist(item, "script_binding") and string.find(ini:r_string(item, "script_binding"), "bind_stalker"))
end

local bad_objects = {}
local fname = ""
local not_found_name = nil

-- удаление проблемных объектов
function del_bad_objects()
	local flist = f:file_list_open_ex("$game_settings$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*.del")
	if flist:Size() == 0 then return end
	fname = flist:GetAt(0):NameFull()
	bad_objects = string.explode(string.sub(fname, 0, -5), " ", true)
	local se_obj

	-- сначала проверим наличие всех секций
	for i, se_name in ipairs(bad_objects) do
		if not server_object(se_name) then
			not_found_name = se_name
			return
		end
	end
	
	-- теперь удаляем
	for i, se_name in ipairs(bad_objects) do
		se_obj = server_object(se_name)
		release(se_obj, true)
	end
	
	return
end

-- вывод информации об удаленных объектах
function send_bad_objects_info()
	-- есть ненайденный объект
	if not_found_name then
		send_info("Не найден проблемный объект: "..not_found_name)
		not_found_name = nil
		return
	end
	
	for i, se_name in ipairs(bad_objects) do
		send_info("Удален проблемный объект: "..se_name)
		archievements.acv_count_event("acv_neud", 20, "Неудачник")
	end

	local f1 = f:update_path("$game_settings$", fname)
	f:file_delete(f1)
	bad_objects = {}
end

function send_info(text)
	sms(text, nil, "nano", 10000)
	console:execute("load ~~~ "..text)
end

-- проверка допопций
function check_options()
	local value = console:get_float("cam_inert")
	if value > 0.9 then
		console:execute("cam_inert 0.9")
	end
end
