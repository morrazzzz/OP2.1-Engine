----------------------------------------------------------------------------------------------------
-- Mob remarks
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

--[[
Proper70: так как нигде не используется, то многое переписано.
При включении схемы монстр всегда поворачивается на актора.

Доступные анимации для anim:
    const attack = 6;
    const danger = 0;
    const eat = 3;
    const free = 1;
    const lie_idle = 2;
    const look_around = 7;
    const panic = 2;
    const rest = 5;
    const sit_idle = 1;
    const sleep = 4;
    const stand_idle = 0;
    const turn = 8;

Доступные анимации для anim_head (пока не разобрался, как работают):
    const head_anim_angry = 1;
    const head_anim_glad = 2;
    const head_anim_kind = 3;
    const head_anim_normal = 0;
    const sound_script = 128;

--]]


class "mob_remark"

function mob_remark:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function mob_remark:reset_scheme()
	printf("_bp: mob_remark:reset_scheme: %s", self.object:name())
	
	mob_state_mgr.set_state(self.object, db.actor, self.st.state)
	self.object:disable_talk()
	xr_logic.mob_capture(self.object, not self.st.no_reset)

	self.anims = parse_names(self.st.anim)
	
	if self.st.snd then
		self.snds = parse_names(self.st.snd)
	else
		self.snds = {}
	end

	if self.st.time then
		self.times = parse_names(self.st.time)
	else
		self.times = {}
	end

	self.tip_sent = false
	
	self.st.signals = {}
	self.action_end_signalled = false
	--printf("_bp: mob_remark:reset_scheme end")
end

function mob_remark:update(delta)
	--printf("__bp: mob_remark update: %d", time_global())

	if xr_logic.try_switch_to_another_section(self.object, self.st) then
		return
	end

	if self.st.dialog_cond and xr_logic.pick_section_from_condlist(self.object,
	     self.st.dialog_cond.condlist) ~= nil then
		--printf("_bp: enable talk")
	     	if not self.object:is_talk_enabled() then
			self.object:enable_talk()
		end
	else
		--printf("_bp: disable talk")
		if self.object:is_talk_enabled() then
			self.object:disable_talk()
		end
	end

	if not self.tip_sent then
		self.tip_sent = true
		if self.st.tip then
			self.object:set_tip_text(self.st.tip)
		end
	end

	--printf("_bp: mob_remark:update [%s]", self.object:name())
	
	if not self.state_executed and not self.object:action() then
		self.state_executed = true
		self:execute_state()
	end

	if self.object:get_script() and not self.object:action() then
		--self.object:script(false, script_name())
		--printf("__bp: free from script: %d", time_global())

		if not self.action_end_signalled then
			self.action_end_signalled = true
			self.st.signals["action_end"] = true
			printf("mob_remark: signalling action_end")
		end
	end
end

function mob_remark:execute_state()
	local sndset, tm, cnd
	for num, an in pairs(self.anims) do
		sndset = self.snds[num]
		if self.times[num] then
			tm = tonumber(self.times[num])
		else
			tm = 0
		end
		if sndset and an then
			local snd = mob_sound.pick_sound_from_set(self.object, sndset, {})
			if not snd then
				abort("mobile '%s': section '%s': sound set '%s' does not exist",
					self.object:name(), self.st.section, sndset)
			end
			
			if tm == 0 then
				cnd = cond(cond.sound_end)
			else
				cnd = cond(cond.time_end, tm)
			end
			if self.st.anim_head then
				--printf("__bp: action set: %d", time_global())
				action(self.object, look(look.point, db.actor:position()), anim(anim[an], 0), sound(snd, "bip01_head",
					MonsterSpace[self.st.anim_head]), cnd)
			else
				--printf("__bp: action set: %d", time_global())
				action(self.object, look(look.point, db.actor:position()), anim(anim[an], 0), sound(snd, "bip01_head"), cnd)
			end
		elseif an then
			if tm == 0 then
				cnd = cond(cond.anim_end)
			else
				cnd = cond(cond.time_end, tm)
			end
			--printf("__bp: action set: %d", time_global())
			action(self.object, look(look.point, db.actor:position()), anim(anim[an], 0), cnd)
		--else
		--	if npc:get_script() then
		--		npc:script(false, script_name())
		--	end
		end
	end
end

function mob_remark:use_callback(obj, actor)
	if self.st.on_use then		
		if xr_logic.switch_to_section(self.object, self.st,
		   xr_logic.pick_section_from_condlist(self.object, self.st.on_use.condlist)) then
			return true
		end
	end
	return false
end

function mob_remark:deactivate()
	self.object:set_tip_text_default()
	self.tip_sent = nil
	self.state_executed = nil
	self.action_end_signalled = nil
	self.st.signals["action_end"] = nil
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	printf("DEBUG: add_to_binder: npc:name()='%s', scheme='%s', section='%s'", npc:name(), scheme, section)

	local new_action = mob_remark(npc, storage)

	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.state           = mob_state_mgr.get_state(ini, section, npc)

	st.dialog_cond    = xr_logic.cfg_get_condlist(ini, section, "dialog_cond", npc)
	-- Не работает, т.к. при переключении схем в данный момент монстр всегда
	-- уходит из под скрипта, соответственно, сбрасывает свою очередь actions.
	--st.no_reset       = utils.cfg_get_bool(ini, section, "no_reset", npc, false)
	st.no_reset = true
	st.anim           = utils.cfg_get_string(ini, section, "anim", npc, false, "")
	st.anim_head      = utils.cfg_get_string(ini, section, "anim_head", npc, false, "")
	st.tip            = utils.cfg_get_string(ini, section, "tip", npc, false, "", "")
	st.snd            = utils.cfg_get_string(ini, section, "snd", npc, false, "")
	st.time           = utils.cfg_get_string(ini, section, "time", npc, false, "")

	st.on_use         = xr_logic.cfg_get_condlist(ini, section, "on_use", npc)
end
