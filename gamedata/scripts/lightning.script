local ini = config
local last_lightning_time = 0
local next_lightning_time = 0
local cur_lvl = nil
local xmax = nil
local xmin = nil
local ymax = nil
local ymin = nil
local zmax = nil
local zmin = nil

function strike_if_needed()
	if level.name() == "l05_bar" or xr_conditions.is_day() then return end
	
	local rf = 1-level.rain_factor()
--	if rf~=1 then
	if rf < 0.95 then
		if next_lightning_time == 0 then
			next_lightning_time = time_global() + math.random(25000,40000)+40000*rf
		else
			if next_lightning_time <= time_global() then
				strike()
				next_lightning_time = time_global() + math.random(25000,40000)+40000*rf
			end
		end
	else
		next_lightning_time = 0
	end
end	

function strike()
	local lvl = level.name()
	if lvl ~= cur_lvl then -- уровень не совпадает
		xmax = level.get_bounding_volume().max.x
		xmin = level.get_bounding_volume().min.x
		ymax = level.get_bounding_volume().max.y
		ymin = level.get_bounding_volume().min.y
		zmax = level.get_bounding_volume().max.z
		zmin = level.get_bounding_volume().min.z
		cur_lvl = lvl
		--[[
		qqq("xmax = "..xmax)
		qqq("xmin = "..xmin)
		qqq("ymax = "..ymax)
		qqq("ymin = "..ymin)
		qqq("zmax = "..zmax)
		qqq("zmin = "..zmin)
		--]]
	end
	local x = math.random(10*xmin,10*xmax)/10
	local z = math.random(10*zmin,10*zmax)/10
	local y = ymax + 10
	--qqq("X: "..x.." Z: "..z)
	local lightning_particles = {
		"nature\\kirag_amik\\groza\\groza_effect_grunt",
		"nature\\kirag_amik\\groza\\groza_effect_grunt_1",
		"nature\\kirag_amik\\groza\\groza_effect_krysha",
		"nature\\kirag_amik\\groza\\groza_effect_krysha_1",
		"nature\\kirag_amik\\groza\\groza_effect_kust",
		"nature\\kirag_amik\\groza\\groza_effect_kust_1",
		"nature\\kirag_amik\\groza\\groza_effect_metal",
		"nature\\kirag_amik\\groza\\groza_effect_metal_1"
	}
	local lightning_sounds = {
		"nature\\thunderNEW1",
		"nature\\thunderNEW2",
		"nature\\thunderNEW3",
		"nature\\thunderNEW4",
		"nature\\thunderNEW5",
		"nature\\thunderNEW6"
	}
	create("lightning",xyz(x,y,z),db.actor:level_vertex_id(),db.actor:game_vertex_id())
	particles_object(lightning_particles[math.random(#lightning_particles)]):play_at_pos(xyz(x,y,z))
    voice(lightning_sounds[math.random(#lightning_sounds)]):play_at_pos(db.actor,xyz(x,y,z))
end

function init(obj)
	local new_binder = lightning_binder(obj)
	obj:bind_object(new_binder)
end

---------------------------------------------------------------------------------------------
class "lightning_binder" (object_binder)
function lightning_binder:__init(obj) super(obj)
	self.loaded = false
	self.init = false
end 

function lightning_binder:reload(section)
	object_binder.reload(self, section)
end

function lightning_binder:reinit()
	object_binder.reinit(self)
end

function lightning_binder:net_save_relevant()
	return true
end

function lightning_binder:save(packet)
	object_binder.save(self, packet)
end

function lightning_binder:load(reader)
	object_binder.load(self, reader)
end

function lightning_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end
	return true
end

function lightning_binder:net_destroy()
	object_binder.net_destroy(self)
end

function lightning_binder:update(delta)
	object_binder.update(self, delta)
	if not self.init then
		self.init = true
		self.object:set_const_force(vector():set(0,-1,0), 98.1*self.object:mass(), 65535*65535)
	end
	if not ymin or self.object:position().y <= ymin then
		self.object:get_car():CarExplode()
	end
end

