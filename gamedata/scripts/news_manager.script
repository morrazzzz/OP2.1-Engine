local news = {
	tips_esc_trader_about_anomalies	= voice([[characters_voice\scenario\trader\trader_tutorial_anomalies_1]]),
	gar_dolg_warning				= voice([[characters_voice\scenario\duty\duty_warning1]]),
	esc_return_dv					= voice([[characters_voice\scenario\trader\return_from_dv]]),
	escape_fox_quest				= voice([[characters_voice\scenario\trader\trader_pda_fox]]),
	tip_petruha_report				= voice([[characters_voice\scenario\escape\petruha_raport_p]]),


	tips_agr_krot_sos				= voice([[characters_voice\scenario\agroprom\krot_help_pda_1]]),
	tips_agr_krot_sos1				= voice([[characters_voice\scenario\agroprom\krot_help_pda_2]]),
	tips_agr_krot_sos2				= voice([[characters_voice\scenario\agroprom\krot_help_pda_2]]),
    tips_agr_stalker_help_2			= voice([[characters_voice\scenario\agroprom\stalker_help_2]]),
    tips_agr_stalker_help_1			= voice([[characters_voice\scenario\agroprom\stalker_help_1]]),
	-- ghost_tips						= voice([[characters_voice\scenario\agroprom\strelok_pda]]),
	tips_agr_trader_documents		= voice([[characters_voice\scenario\agroprom\trader_pda_1]]),
    pass_to_1st_door                = voice([[characters_voice\scenario\val\door1_password]]),
    pass_to_2nd_door                = voice([[characters_voice\scenario\val\door2_password]]),


	bar_ecolog_crush_heli_down		= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_1]]),
	bar_freedom_attack_attract_actor= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_2]]),
	bar_freedom_spam_1				= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_6]]),
	bar_freedom_spam_2				= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_4]]),
	bar_freedom_spam_3				= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_3]]),
	bar_freedom_spam_4				= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_5]]),
	bar_freedom_attack				= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_7]]),
	bar_freedom_attack_spy			= voice([[characters_voice\scenario\Rostok\Heli_crush\wolfhound_pda_8]]),
	bar_ecolog_crush_start_heli		= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_1]]),
	bar_ecolog_crush_attract_actor  = voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_2]]),
	bar_ecolog_spam_1				= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_3]]),
	bar_ecolog_spam_2				= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_4]]),
	bar_ecolog_spam_3				= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_5]]),
	bar_ecolog_spam_4				= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_6]]),
	bar_ecolog_attack				= voice([[characters_voice\scenario\Rostok\Heli_crush\kruglov_pda_7]]),
    rostok_kruglov_spam_1			= voice([[characters_voice\scenario\Rostok\kruglov_pda_help_1]]),
    rostok_kruglov_spam_2			= voice([[characters_voice\scenario\Rostok\kruglov_pda_help_3]]),
	bar_ecolog_escape				= voice([[characters_voice\scenario\Rostok\volkodav_pda_kruglov_escape_1]]),
    storyline_vasilyev_tip			= voice([[characters_voice\scenario\yantar\vasiliev_pda]]),
    storyline_ghost_tip 			= voice([[characters_voice\scenario\yantar\ghost_pda]]),
    yan_saharov_message 			= voice([[characters_voice\scenario\yantar\professor_to_actor_pda_3]]),
	yan_saharov_message_2 			= voice([[characters_voice\scenario\yantar\professor_to_actor_pda_4]]),
    yan_saharov_message_3 			= voice([[characters_voice\scenario\yantar\professor_to_actor_pda_5]]),
	
	yan_scientist_probe				= voice([[characters_voice\scenario\yantar\kruglov_radiation_quest_13]]),
	yan_scientist_probe_1			= voice([[characters_voice\scenario\yantar\kruglov_radiation_quest_11]]),
	yan_scientist_probe_2			= voice([[characters_voice\scenario\yantar\kruglov_radiation_quest_12]]),
	yan_scientist_probe_3			= voice([[characters_voice\scenario\yantar\kruglov_radiation_quest_6]]),
	
	rostok_kruglov_follow			= voice([[characters_voice\scenario\Rostok\pda_kruglov_help_6]]),
	bar_freedom_chase			= voice([[characters_voice\scenario\Rostok\pda_kruglov_stop_enemy_1]]),
	rostok_kruglov_follow_2			= voice([[characters_voice\scenario\Rostok\pda_kruglov_stop_enemy_2]]),
	rostok_kruglov_follow_3			= voice([[characters_voice\scenario\Rostok\pda_kruglov_help_5]]),
		
	bar_territory_dolg_1_hit		= voice([[characters_voice\scenario\bar\pda\voronin_gunfire_pda_1]]),
	bar_territory_dolg_2_hit		= voice([[characters_voice\scenario\bar\pda\voronin_gunfire_pda_2]]),
	bar_territory_dolg_3_hit		= voice([[characters_voice\scenario\bar\pda\voronin_gunfire_pda_3]]),
	bar_territory_dolg_kill			= voice([[characters_voice\scenario\bar\pda\voronin_gunfire_pda_4]]),
	
	tips_bun_komand                 = voice([[characters_voice\scenario\bun\patrol_prikaz]]),

	general_ecolog_tip_1            = voice([[characters_voice\scenario\yantar\professor_to_actor_pda_1]]),
    general_ecolog_tip_2            = voice([[characters_voice\scenario\yantar\professor_to_actor_pda_2]]),


    tips_gar_hellcar_alarm			= voice([[characters_voice\scenario\garbage\neutrals_commander_pda_1]]),
	gar_dolg_blokpost_warning		= voice([[characters_voice\scenario\duty\duty_warning1]]),
	gar_dolg_monster_rush			= voice([[characters_voice\scenario\duty\duty_request1]]),
	gar_direction_fire				= voice([[characters_voice\scenario\garbage\junkyard_combat_ambush]]),
	gar_hellcar_victory				= voice([[characters_voice\scenario\garbage\junkyard_combat_end]]),
	gar_actor_looser				= voice([[characters_voice\scenario\garbage\duty_after_rush_bad]]),
	gar_actor_normal				= voice([[characters_voice\scenario\garbage\duty_after_rush_normal]]),
	gar_actor_winner				= voice([[characters_voice\scenario\garbage\duty_after_rush_good]]),


	esc_direction_fire				= voice([[characters_voice\scenario\escape\lager_fanat_attack]]),
	esc_fanat_victory				= voice([[characters_voice\scenario\escape\lager_fanat_victory]]),
	
	rad_barman_spam					= voice([[characters_voice\scenario\radar\rad_barman_message]]),


	val_monolith_trader_pda1		= voice([[characters_voice\scenario\val\trader_dialog1]]),
	o_soznanie_text					= voice([[characters_voice\scenario\sarcofag\o_soznanie_call]]),


-- dublicate pda sounds for remark scheme
    val_rob_leader_jeer_1           = voice([[characters_voice\scenario\val\rob_leader_jeer_1_p]]),
--    val_rob_leader_call             = voice([[characters_voice\scenario\val\rob_call_1_p]]),

    pri_followers_leader_phrase1_1  = voice([[characters_voice\scenario\pri\followers_leader_phrase1_1_p]]),
    pri_followers_leader_phrase1_2  = voice([[characters_voice\scenario\pri\followers_leader_phrase1_2_p]]),
    pri_followers_leader_phrase1_3  = voice([[characters_voice\scenario\pri\followers_leader_phrase1_3_p]]),
}

local pda_news = voice([[device\pda\pda_news]])
local pda_tips = voice([[device\pda\pda_tip]])
local pda_task = voice([[device\pda\pda_objective]])

-- При добавлении новых квестовиков добавлять для них иконки в ui_iconstotal и прописывать сюда полное имя, как оно идет в смс. Или прописывать sender в вызов send_tip. Сортировать по алфавиту.
local tips_icons = {
	aaz 		= {249,1128,"ААЗ:","Ааз:"},
	adrenalin 	= {0,1880,"АДРЕНАЛИН:","Адреналин:"},
	akill		= {332,1128,"АКИЛЛ:","Акилл:"},
	akim 		= {166,1081,"АКИМ:","Аким:"},
	alexandrych = {166,1739,"АЛЕКСАНДРЫЧ:","Александрыч:"},
	alp			= {332,1175,"АЛЬПИНИСТ:","Альпинист:"},
	anna		= {0,1269,"АННА:","Анна:"},
	andersen	= {498,1363,"АНДЕРСЕН:","Андерсен:"},
	ara 		= {415,423,"АРА:","Ара:"},
	arena    	= {332,141,"АРНИ:","Арни:"},
	arhara 		= {83,1081,"АРХАРА:","Архара:"},
	ariadna 	= {166,1692,"АРИАДНА:","Ариадна:"},
	backpack	= {0,846},
	barmaley	= {498,1316,"СЭР БАРМАЛЕЙ:","Сэр Бармалей:"},
	barman   	= {332,235,"БАРМЕН:","Бармен:"},
	baty 		= {249,1316,"БАТЯ:","Батя:"},
	bes 		= {332,1645,"БЕС:","Бес:"},
	bibliofrend = {0,1175,"ПРАЙМ:","Прайм:"},
	bibliofrend_black = {0,1222},
	bland 		= {166,1598,"БЛЭНД:","Блэнд:"},
	blondy 		= {166,1833,"БЛОНДИНКА:","Блондинка:"},
	bocman 		= {83,1598,"БОЦМАН:","Боцман:"},
	borman 		= {498,1175,"БОРМАН:","Борман:"},
	boroda 		= {0,1598,"БОРОДА:","Борода:"},
	borov 		= {332,564,"БОРОВ:","Боров:"},
	brodaga 	= {0,1504,"БРОДЯГА:","Бродяга:"},
	bubulyka 	= {0,1316,"СТАЛКЕР БУБУЛЮКА:","Сталкер Бубулюка:"},
	buusty		= {83,1410,"БАСТИ:","Басти:"},
	chernomor 	= {166,1316,"ЧЕРНОМОР:","Черномор:"},
	coll	 	= {664,423,"КОЛЛЕКЦИОНЕР:","Коллекционер:"},
	dan 		= {166,987,"ДЭН:","Дэн:"},
	dasha 		= {166,1880,"ДАША:","Даша:"},
	death    	= {0,752},
	default  	= {0,658}, -- по умолчанию
	dezertir	= {332,0,"ДЕЗЕРТИР:","Дезертир:"},
	diak 		= {498,1457,"ДЬЯК:","Дьяк:"},
	dimak 		= {249,1081,"ДИМАК:","Димак:"},
	dmitriev 	= {498,0,"ПРОФЕССОР ДМИТРИЕВ:","Профессор Дмитриев:"},
	docent 		= {415,1739,"ДОЦЕНТ:","Доцент:"},
	doctor 		= {415,846,"ДОКТОР:","Доктор:"},
	dolgovazyi	= {415,1786,"ДОЛГОВЯЗЫЙ:","Долговязый:"},
	doctor_black = {83,1551,"ЧЁРНЫЙ ДОКТОР:","Чёрный Доктор:"},
	dolg     	= {498,141,"ДОЛГ:","Долг:"},
	dragunof	= {249,1833,"ДРАГУНОВ:","Драгунов:"},
	duda 		= {166,1551,"ДУДА:","Дуда:"},
	ecolog   	= {498,0},
	elsa 		= {0,1739,"ЭЛЬЗА:","Эльза:"},
	err 		= {913,799}, -- error
	fanat		= {332,1551,"ФАНАТ:","Фанат:"},
	father_pantera = {83,1833,"ОТЕЦ ПАНТЕРЫ:","Отец Пантеры:"},
	fenix 		= {498,1645,"ФЕНИКС:","Феникс:"},
	fenrir 		= {0,1034,"ФЕНРИР:","Фенрир:"},
	filatov		= {498,1692,"КАПИТАН ФИЛАТОВ:","Капитан Филатов:"},
	filin	  	= {498,1739,"ФИЛИН:","Филин:"},
	freedom  	= {498,94,"СВОБОДА:","Свобода:"},
	freeman  	= {498,1034,"ФРИМЕН:","Фримен:"},
	fric 		= {83,1504,"ФРИЦ:","Фриц:"},
	gavr		= {332,1739,"ГАВР:","Гавр:"},
	gen_info 	= {0,658}, -- общая инфа
	gila		= {332,1786,"ЖИЛА:","Жила:"},
	ginekolog 	= {0,1927,"ШУРА ГИНЕКОЛОГ:","Шура Гинеколог:"},
	gologramma 	= {498,1269,"ГОЛОГРАММА:","Голограмма:"},
	grach		= {332,1081,"ГРАЧ:","Грач:"},
	haliava		= {332,1269,"ХАЛЯВА:","Халява:"},
	hiko 		= {498,1833,"ХИКО:","Хико:"},
	himera 		= {83,1927,"ХИМЕРА:","Химера:"},
	himik 		= {249,1222,"ХИМИК:","Химик:"},
	holod 		= {83,1974,"ХОЛОДОВ:","Холодов:"},
	iskra 		= {166,1128,"ИСКРА:","Искра:"},
	ivancov		= {332,329,"ИВАНЦОВ:","Иванцов:"},
	kalinin		= {498,1410,"КАЛИНИН:","Калинин:"},
	kalmyk		= {249,1927,"КАЛМЫК:","Калмык:"},
	kanal	 	= {747,94,"ОБЩИЙ КАНАЛ:","Общий канал:"},
	kartograf  	= {913,235,"КАРТОГРАФ:","Картограф:"},
	kep		  	= {415,1974,"КЭП:","Кэп:"},
	kidalo		= {249,1833,"САНЁК РАЗБОЙНИК:","Санёк Разбойник:"},
	killer   	= {913,940,"НАЁМНИКИ:","Наёмники:"},
	klenov 		= {83,1316,"КЛЁНОВ:","Клёнов:"},
	klyk 		= {83,1034,"КЛЫК:","Клык:"},
	kolmogor 	= {83,1269,"КОЛМОГОР:","Колмогор:"},
	korsar		= {332,1081,"КОРСАР:","Корсар:"},
	korshun		= {498,1739,"КОРШУН:","Коршун:"},
	kostya		= {332,1598,"КОСТЯ:","Костя:"},
	kostylnuga 	= {83,1175,"КОСТЫЛЬНОГА:","Костыльнога:"},
	kotobegemot = {0,987,"КОТОБЕГЕМОТ:","Котобегемот:"},
	kot			= {498,1081,"КОТ:","Кот:"},
	krest		= {498,1504,"КРЕСТ:","Крест:"},
	krisyk		= {332,1692,"КРЫСЮК:","Крысюк:"},
	kruglov		= {332,1363,"КРУГЛОВ:","Круглов:"},
	kruger		= {249,1692,"КРЮГЕР:","Крюгер:"},
	kulinar		= {332,1645,"КУЛИНАР:","Кулинар:"},
	krot     	= {332,47,"КРОТ:","Крот:"},
	kuzmat 		= {166,1927,"КУЗЬКИНА МАТЬ:","Кузькина Мать:"},
	kuznecov 	= {332,752,"КУЗНЕЦОВ:","Кузнецов:"},
	lesnik 		= {166,1269,"ЛЕСНИК:","Лесник:"},
	lis 		= {498,1222,"ЛИС:","Лис:"},
	lisiy 		= {415,141,"ЛЫСЫЙ:","Лысый:"},
	lentay		= {249,1645,"ЛЕНТЯЙ:","Лентяй:"},
	lobsang 	= {0,1410,"ЛОБСАНГ:","Лобсанг:"},
	loh 		= {332,611,"СЕРГЕЙ ЛОХМАТЫЙ:","Сергей Лохматый:"},
	lovkach 	= {664,517,"ЛОВКАЧ:","Ловкач:"},
	luber		= {332,1316,"МАКС ЛЮБЕР:","Макс Любер:"},
	lucash 		= {415,235,"ЛУКАШ:","Лукаш:"},
	ludmila		= {0,1692,"ЛЮДМИЛА:","Людмила:"},
	maks		= {332,1410,"МАКС:","Макс:"},
	maksimilian = {166,1175,"МАКСИМИЛИАН:","Максимилиан:"},
	maria 		= {0,1551,"МАРИЯ:","Мария:"},
	masha 		= {166,1833,"МАША:","Маша:"},
	meceniy 	= {913,846,"МЕЧЕНЫЙ:","Меченый:"},
	mercaushy 	= {249,1175,"МЕРЦАЮЩИЙ:","Мерцающий:"},
	molniy 		= {249,1034,"МОЛНИЯ:","Молния:"},
	monolith 	= {913, 893,"МОНОЛИТ:","Монолит:"},
	morozko 	= {249,1410,"МОРОЗКО:","Морозко:"},
	muha 		= {83,1739,"МУХА:","Муха:"},
	nano 		= {913,752}, -- nano_suit
	nazar 		= {249,987,"НАЗАР:","Назар:"},
	net		 	= {747,94,"ЛОКАЛЬНАЯ СЕТЬ:","Локальная сеть:"},
	noi 		= {498,1598,"НОЙ:","Ной:"},
	norman 		= {166,1457,"НОРМАН:","Норман:"},
    nodata   	= {249,940,"ИСТОЧНИК НЕИЗВЕСТЕН:","Источник неизвестен:"},
	o_soznanie 	= {415,893,"О-СОЗНАНИЕ:","О-Сознание:"},
	obmorok 	= {166,1504,"ОБМОРОК:","Обморок:"},
	op2	 		= {332,987,"КОМАНДА СОЗДАТЕЛЕЙ ОП-2:","Команда создателей ОП-2:"},
	osvedomitel	= {498,987,"ОСВЕДОМИТЕЛЬ:","Осведомитель:"},
	otshelnik 	= {0,1833,"ОТШЕЛЬНИК:","Отшельник:"},
	ozersky		= {913,611,"ПРОФЕССОР ОЗЕРСКИЙ:","Профессор Озерский:"},
	pantera 	= {83,1128,"ПАНТЕРА:","Пантера:"},
	parfumer 	= {166,1410,"ПАРФЮМЕР:","Парфюмер:"},
	peregar 	= {498,1551,"ПЕРЕГАР:","Перегар:"},
	petrenko 	= {332,376,"ПЕТРЕНКО:","Петренко:"},
	petrov 		= {166,1457,"СТАЛКЕР ПЕТРОВ:","Сталкер Петров:"},
	petrovich 	= {249,1269,"ПЕТРОВИЧ:","Петрович:"},
	petruha 	= {332,799,"ПЕТРУХА:","Петруха:"},
	piligrim 	= {0,1974,"ПИЛИГРИМ:","Пилигрим:"},
	plichko		= {332,282,"ПЛИЧКО:","Пличко:"},
	potap		= {249,1880,"ПОТАП:","Потап:"},
	povar		= {249,1739,"ПОВАР:","Повар:"},
	prapor		= {332,1880,"ПРАПОР:","Прапор:"},
	prigorshnya = {166,1786,"ПРИГОРШНЯ:","Пригоршня:"},
	prizrak  	= {415,705,"ПРИЗРАК:","Призрак:"},
	proper70 	= {0,1457,"ПРОПЕР СЕМИДЕСЯТЫЙ:","Пропер Семидесятый:"},
	provodnik	= {332,1504,"ПРОВОДНИК:","Проводник:"},
	pula		= {332,1457,"ПУЛЯ:","Пуля:"},
	pulemet		= {332,1081,"САНЬКА ПУЛЕМЁТЧИК:","Санька Пулеметчик:"},
	questman_death = {664,470}, -- смерть квестовика/гг
	radist 		= {166,1222,"РАДИСТ:","Радист:"},
	resident_evil = {0,1128,"ОБИТЕЛЬ ЗЛА:","Обитель Зла:"},
	remind		= {913,423,"НАПОМИНАНИЯ:","Напоминания:"},
	romale		= {166,1974,"РОМА РОМАЛЕ:","Рома Ромале:"},
	saharov  	= {332,470,"САХАРОВ:","Сахаров:"},
	sak			= {415,987,"СЯК:","Сяк:"},
	sapsan 		= {83,1692,"САПСАН:","Сапсан:"},
	sedoy 		= {83,1363,"СЕДОЙ:","Седой:"},
	semenov		= {83,1363,"СЕМЁНОВ:","Семёнов:"},
	semeckiy	= {332,1974,"ЮРИЙ СЕМЕЦКИЙ:","Юрий Семецкий:"},
	shadow_monolit = {83,1880,"ТЕНЬ МОНОЛИТА:","Тень Монолита"},
	shadowman	= {249,1974,"ШЕДОУМЕН:","Шедоумен:"},
	shahter 	= {166,1034,"ШАХТЁР:","Шахтёр:"},
	shnira		= {332,1692,"ШНЫРА:","Шныра:"},
	shurup		= {332,1222,"ШУРУП:","Шуруп:"},
	shax		= {249,1457,"ШАХМАТИСТ:","Шахматист:"}, 
	sherstuk	= {249,1551,"ШЕРСТЮК:","Шерстюк:"},
	shi3 		= {249,1363,"ШИ3:","Ши3:"},
	sidor 		= {249,611,"СИДОРОВИЧ:","Сидорович:"},
	skraga		= {249,1598,"СКРЯГА:","Скряга:"},
	sledopyt	= {332,1034,"СЛЕДОПЫТ:","Следопыт:"}, 
	snegir 		= {0,1645,"СЛАВИК СНЕГИРЬ:","Славик Снегирь:"},
	solvador 	= {83,1645,"СОЛЬВАДОР:","Сольвадор:"},
	stalker  	= {0,658},
	starik		= {415,1927,"СТАРИК:","Старик:"},
	starogil	= {664,658,"СТАРЫЙ ЖИЛ:","Старый Жил:"},
	strelok		= {913,705,"СТРЕЛОК:","Стрелок:"},
	suslov 		= {0,1363,"СУСЛОВ:","Суслов:"},
	sviblov 	= {166,1645,"СВИБЛОВ:","Свиблов:"},
	svyaz	 	= {747,94,"ОПЕРАТОР СВЯЗИ:","Оператор связи:"},
    tolik		= {249,1504,"ТОЛИК:","Толик:"},
	trade	 	= {0,0}, -- деньги
	trader   	= {332,893}, -- сидорович
    trofim		= {332,0,"ТРОФИМ:","Трофим:"},
	uniq  	 	= {498,47},
	unknown 	= {913,799,"НЕИЗВЕСТНЫЙ СТАЛКЕР:","Неизвестный сталкер:"},
	varg 		= {498,1786,"ВАРГ:","Варг:"},
	vesker 		= {0,1786,"ВЕСКЕР:","Вескер:"},
	viking 		= {415,94,"ВИКИНГ:","Викинг:"},
	vitamin 	= {83,1786,"ВИТАМИН:","Витамин:"},
	vol 		= {913,517}, -- волазар первый
	vol_new 	= {913,564,"ВОЛАЗАР:","Волазар:"},
	volkov	 	= {249,1645,"ПРОФЕССОР ВОЛКОВ:","Профессор Волков:"},
	voronin 	= {332,423,"ВОРОНИН:","Воронин:"},
	voron 		= {498,1128,"ВОРОН:","Ворон:"},
	vasiliy		= {415,1034,"ВАСИЛИЙ:","Василий:"},
	vasya9		= {498,376,"ВАСЯ ДЕВЯТЫЙ:","Вася Девятый:"},
    weaprep 	= {0,517}, -- апгрейд оружия
	wolf	 	= {332,940,"ВОЛК:","Волк:"},
	wolffrend 	= {0,1081,"ВОЖАК:","Вожак:"},
	yakut		= {332,1927,"ЯКУТ:","Якут:"},
	yurik		= {249,1786,"ЮРИК:","Юрик:"},
	zahar	 	= {415,1880,"ЗАХАР:","Захар:"},
	zashita 	= {664,141,"СИСТЕМА ЗАЩИТЫ:","Система защиты:"},
	zemlyak 	= {83,1457,"ЗЕМЛЯК:","Земляк:"},
	ziklop 		= {83,987,"ЦИКЛОП:","Циклоп:"},
	zlobny 		= {166,1363,"ЗЛОБНЫЙ:","Злобный:"}
}

function get_sender_icon_full(sender) -- для заголовка вернуть и [3] и [4]
	if sender == nil then
		return tips_icons["default"]
	end
	local icon=tips_icons[sender]
	if icon==nil then
		return tips_icons["default"]
	end
	return icon
end

-- Получение иконки отправителя
function get_sender_icon(text, sender)
	if sender == nil or not tips_icons[sender] then
		-- пробуем найти иконку по заголовку СМС
		sender = nil
		
		for k,v in pairs(tips_icons) do
			if (v[3] and string.find(text, v[3], 1, true)) or (v[4] and string.find(text, v[4], 1, true)) then
				sender = k
				break
			end
		end
		
		if sender == nil then
			-- не нашли
			sender = "default"
		end
	end
	
	return tips_icons[sender][1], tips_icons[sender][2]
end

function send_tip(news_id, timeout, sender, showtime, sender_id, ozvuchka)
	if news_id == nil then return false end

	if sender_id ~= nil then
		printf("try to send tips for [%s]", tostring(sender_id))
		if ai then
			local npc = story_object(sender_id)
			if npc ~= nil then
				if npc.online then
					--в онлайне проверяем на раненность
					if xr_wounded.is_heavy_wounded_by_id(npc.id) then
						printf("[PDA]Cannot send tips [%s], sender is heavy wounded", tostring(news_id))
						return false
					end
				end
				-- в других случаях только на смерть
				if npc:alive() == 1 then
					printf("[PDA]Cannot send tips [%s], sender is dead", tostring(news_id))
					return false
				end
			end
		end
	end

	--' Если задан timeout, то вызываем отложенно для синхронизации озвучки
	if timeout then
		amk.start_timer("sms", timeout, "sms(\""..string.gsub(news_id,"\\","\\\\").."\",nil,"..(sender and "\""..sender.."\"" or "nil")..","..(showtime or "nil")..","..(sender_id or "nil")..","..(ozvuchka and "[["..ozvuchka.."]]" or "nil")..")")
		return true
	else
		timeout = 0
	end
	
	if showtime == nil then showtime = 5000 end

	if ozvuchka then
		--' играем озвучку
		xr_sound.stop_prev_sms_sound()

		if getFS():exist("$game_sounds$", ozvuchka..".ogg") then
			local ozvuchka_snd = voice(ozvuchka)
			ozvuchka_snd:play(db.actor, timeout, sound_object.s2d)
			
			--' Необходимо поставить время показа по длине сцены
			showtime = ozvuchka_snd:length()
			if showtime < 5000 then showtime = 5000 end
		else
			abort("! Send_tip: sound [%s] does not exist", ozvuchka)
		end
	else
		--' Играем дефолтный звук
		pda_tips:play_no_feedback(db.actor, sound_object.s2d, timeout, vector(), 1.0)
		if news[news_id] ~= nil then
			--' Играем звук забитый
			news[news_id]:play(db.actor, timeout+1, sound_object.s2d)

			--' Необходимо поставить время показа по длине сцены
			showtime = news[news_id]:length()
		end
	end
	
	-- Определяем, ГГ как отправитель по игре уже Cтрелок, или еще Меченый
	if has_info("esc_find_doctor_done") then
		news_id = string.gsub(news_id, "МЕЧЕНЫЙ:", "СТРЕЛОК:", 1)
		news_id = string.gsub(news_id, "Меченый:", "Стрелок:", 1)
	else
		news_id = string.gsub(news_id, "СТРЕЛОК:", "МЕЧЕНЫЙ:", 1)
		news_id = string.gsub(news_id, "Стрелок:", "Меченый:", 1)
	end

	local news_text = "%c[255,160,160,160]"..game.translate_string("st_tip").."\\n".."%c[default]"..game.translate_string(news_id)
	local x,y = get_sender_icon(news_text, sender)
	db.actor:give_game_news(news_text, "ui\\ui_iconsTotal", Frect():set(x,y,83,47), timeout*1000, showtime)
	return true
end

function send_tip_nosound(actor, news_id, timeout, sender)
	if news_id == nil then return end

	timeout = 0

	--' Играем дефолтный звук
	pda_tips:play(db.actor, timeout, sound_object.s2d)
	local news_sound = news[news_id]

	return news_sound
end

local action_descr_by_type = {
	new = "general_new_task",
	update = "general_update_task",
	complete = "general_complete_task",
	fail = "general_fail_task"
}

local cycletask = {
	[0] = "eliminate_lager",
	[1] = "defend_lager",
	[2] = "kill_stalker",
	[3] = "monster_part",
	[4] = "artefact",
	[5] = "find_item",
	[6] = "unique_item",
}

function send_task(actor, type, task, objective)
	-- u3_utils.printf("send_task function started with type: "..type..".")
	if db.actor == nil then return false end
	
	local task_title = task:get_title()
	local task_time = string.find(task_title, "\\n", 1, true)
	if task_time then
		task_title = string.sub(task_title, 1, task_time-1)
	end
	local skip_autosave = false -- пропуск автосейва на циклических заданиях
	local news_text, task_texture, task_rect
	local objective_index = objective:get_idx() + 1
	
	--' Играем дефолтный звук
	pda_task:play(db.actor, 0, sound_object.s2d)

	-- цвет сообщения
	local text_color = "%c[255,160,160,160]"
	if type == "fail" then
		text_color = "%c[255,255,0,0]"
	end
	
	-- Циклическое ли задание?
	local task_id = task:get_id()
	local cycletask_type = (string.find(task_id, "^tm_") and tonumber(string.sub(task_id, 4, 4))) or nil
	
	if cycletask[cycletask_type] then
		skip_autosave = true
		
		--' Циклическое задание - берем координаты из текстуры таска
		task_texture, task_rect = get_texture_info("ui_iconsTotal_"..cycletask[cycletask_type], "ui_iconsTotal_stalker10")
		
		news_text = text_color..game.translate_string(action_descr_by_type[type]).."\\n"..
		"%c[255,0,255,255]"..game.translate_string(task_title)..": %c[255,127,255,255]"..game.translate_string(task:get_objective(1):get_description())
	else
		--' Берем координаты единой текстуры
		task_texture, task_rect = get_texture_info("ui_iconsTotal_stalker10", "ui_iconsTotal_stalker10")
		
		news_text = text_color..game.translate_string(action_descr_by_type[type]).."\\n"..
		"%c[255,0,255,255]"..game.translate_string(task_title)
		
		if type ~= "complete" and type ~= "fail" then
			-- workaround for incomplete objective list
			if task:get_objectives_cnt() == objective_index then
				objective_index = objective_index - 1
			end
			
			if type == "new" then
				local obj_desc = task:get_objective(objective_index):get_description()
				if obj_desc ~= nil then
					news_text = news_text..": %c[255,127,255,255]"..game.translate_string(obj_desc)
				end
			elseif type == "update" then
				local obj_desc1 = task:get_objective(objective_index-1):get_description()
				local obj_desc2 = task:get_objective(objective_index):get_description()
				if obj_desc1 ~= nil then
					news_text = news_text.."\\n".."%c[255,127,255,255]Завершено: "..game.translate_string(obj_desc1)
				end
				if obj_desc2 ~= nil then
					news_text = news_text.."\\n".."%c[255,127,255,255]Следующее: "..game.translate_string(obj_desc2)
				end
			end
		end
		
		-- считаем задания
		if type == "update" then
			xr_statistic.add_subtask()
		elseif type == "complete" then
			xr_statistic.add_subtask()
			xr_statistic.add_task()
		end
	end

	if db.actor:is_talking() then	
		db.actor:give_talk_message(news_text, task_texture, task_rect,"iconed_answer_item")
	end	
	--выдаем в любом случае чтобы попало в дневник
	db.actor:give_game_news(news_text, task_texture, task_rect, 0, 30000)
	
	if type == "new" or
		type == "update"
	then
		--' Выдать новое подзадание
		if task:get_objectives_cnt() == objective_index then
			return
		end
		news_text = game.translate_string(task:get_objective(objective_index):get_description())
	else
		news_text = text_color..game.translate_string(action_descr_by_type[type])..
		"\\n".."%c[255,0,255,255]"..game.translate_string(task_title)
	end

	-- автосохранение только при получении и сдаче задания. циклические задания игнорируются.
	if not skip_autosave then
		local news_text_save = game.translate_string(task_title)
		if type == "complete" then
			news_text_save = news_text_save.." - завершено"
		end
		
		-- удаляем предыдущий таймер на сохранение при сдаче/получении нескольких квестов в одном диалоге 
		-- сохраняем только самый последний автосейв по завершении диалога
		if type == "new" or type == "complete" then
			amk.remove_timer("autosave")
			amk.start_timer("autosave", 3, news_text_save)
		end
	end

	hud:AddCustomStatic("main_task", true)
	hud:GetCustomStatic("main_task"):wnd():SetTextST(news_text)
	hud:GetCustomStatic("main_task").m_endTime = time_global()/1000 + 7
end

function send_encyclopedy(_type, group, name)
	local article_types = {
		[0] = "Новая статья в энциклопедии",	-- Справка
		[1] = "Новая заметка в журнале",		-- Журнал
		[2] = "Дополнено описание задания",		-- Задания
		[3] = "Получена информация"				-- Вырезанный раздел, но пусть будет
	}
	pda_news:play(db.actor, 0, sound_object.s2d)
	if _type == 2 then group = string.match(group, "^[^/]+") end
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_locations", "ui_iconsTotal_locations")
	local news_text = "%c[255,160,160,160]"..article_types[_type].."\\n"..
		"%c[255,255,255,0]"..game.translate_string(group)
	if _type~=2 then 
		news_text = news_text..":%c[255,255,255,127] "..game.translate_string(name)
	end
	if db.actor:is_talking() then	
		db.actor:give_talk_message(news_text, task_texture, task_rect,"iconed_answer_item")
	end	
	db.actor:give_game_news(news_text, task_texture, task_rect, 0, 7000)
end

function send_treasure(name, level_name)
	pda_news:play(db.actor, 0, sound_object.s2d)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_abstract5")
	local news_text = "%c[255,160,160,160]"..game.translate_string("st_found_new_treasure")..
		"\\n".."%c[120,255,120,160]"..game.translate_string(level_name)..
		": %c[170,200,200,200]"..game.translate_string(name)	
	db.actor:give_game_news(news_text, task_texture, task_rect, 0, 20000)
end

function get_inv_name(section)
	return config:r_string(section,"inv_name")
end

function relocate_item(type, item, count)
	if db.actor == nil then return false end
	if not count then count = 1 end
	--' Играем дефолтный звук
	if type == "in" then
		local news_text = "%c[255,105,239,146]"..game.translate_string("general_in_item").."\\n".."%c[default]"..iif(count>1,count.."x ","")..game.translate_string(get_inv_name(item))		
		if db.actor:is_talking() then
			db.actor:give_talk_message(news_text, "ui\\ui_icon_equipment", get_item_icon(item), "iconed_answer_item")
		else
			db.actor:give_game_news(news_text, "ui\\ui_icon_equipment", get_item_icon(item), 0, 5000)
		end		
	elseif type == "out" then
		local news_text = "%c[255,255,085,085]"..game.translate_string("general_out_item").."\\n".."%c[default]"..iif(count>1,count.."x ","")..game.translate_string(get_inv_name(item))		
		if db.actor:is_talking() then
			db.actor:give_talk_message(news_text, "ui\\ui_icon_equipment", get_item_icon(item), "iconed_answer_item")
		else
			db.actor:give_game_news(news_text, "ui\\ui_icon_equipment", get_item_icon(item), 0, 5000)
		end		
	end
end

function relocate_money(type, amount)
	if db.actor == nil then return false end


	--' Играем дефолтный звук
	if type == "in" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_money")
		local news_text = "%c[255,105,239,146]"..game.translate_string("general_in_money").."\\n".."%c[default]"..game.translate_string(tostring(amount))
		
		if db.actor:is_talking() then
			db.actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			db.actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end		
	elseif type == "out" then
		local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
		local news_text = "%c[255,255,085,085]"..game.translate_string("general_out_money").."\\n".."%c[default]"..game.translate_string(tostring(amount))
		
		if db.actor:is_talking() then
			db.actor:give_talk_message(news_text, task_texture, task_rect, "iconed_answer_item")
		else
			db.actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
		end		
	end
end
