
--' ОРУЖИЕ
--' Соответствует ли состояние оружия требуемому
class "eva_state_mgr_weapon" (property_evaluator)
function eva_state_mgr_weapon:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon:evaluate()
--	printf("	-- best weapon %s", utils.to_str(self.object:best_weapon():name()))
--	printf("	-- weapon strapped %s", utils.to_str(self.object:weapon_strapped()))
--	printf("	-- weapon unstrapped %s", utils.to_str(self.object:weapon_unstrapped()))
--	printf("	-- weapon strappable %s", utils.to_str(strappable_weapon(self.object:best_weapon())))
	local weapon = state_lib.states[self.st.target_state].weapon
	if (weapon == nil) then
		return true
	end
	local bestweapon = (rx_wmgr and rx_wmgr.get_wm(self.object):get_weapon()) or self.object:best_weapon()
	if not isWeapon(bestweapon) then
--		printf("isWeapon = false")
		return true
	end
	local activeitem = self.object:active_item()
	if (weapon == "strapped" and
	   ((strappable_weapon(bestweapon) and self.object:weapon_strapped()) or
	   (not strappable_weapon(bestweapon) and activeitem == nil))) then
		return true
	end		
	if	(
			(
				(weapon == "unstrapped") or
				(weapon == "fire") or
				(weapon == "sniper_fire")
			) and
			(self.object:weapon_unstrapped() == true) and	
			(activeitem ~= nil) and
			(bestweapon ~= nil) and
			(activeitem:id() == bestweapon:id())
		) then
--		local		temp = "false"
--		if (self.object:weapon_unstrapped() == true) then
--			temp	= "true";
--		end
--		printf("BLIN : [%s][unstrapped] == [%s]",self.object:active_item():name(),temp)
		return true
	end		
	if (weapon == "none" and
	   activeitem == nil) then
		return true
	end
	if (weapon == "drop" and
	   activeitem == nil) then
		return true
	end
	return false
end
--' Лочим ли мы все это для оружия или нет?
class "eva_state_mgr_weapon_locked" (property_evaluator)
function eva_state_mgr_weapon_locked:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_locked:evaluate()
	return not (self.object:weapon_unstrapped() or self.object:weapon_strapped())
end

--' Необходимо ли повесить оружие на спину
class "eva_state_mgr_weapon_strapped" (property_evaluator)
function eva_state_mgr_weapon_strapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_strapped:evaluate()
	return state_lib.states[self.st.target_state].weapon == "strapped"
end
--' Висит ли уже оружие на спине
class "eva_state_mgr_weapon_strapped_now" (property_evaluator)
function eva_state_mgr_weapon_strapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_strapped_now:evaluate()
	local wpn = (rx_wmgr and rx_wmgr.get_wm(self.object):get_weapon()) or self.object:best_weapon()
	if not isWeapon(wpn) then
		return true
	end
	return self.object:weapon_strapped() or 
		   (not strappable_weapon(wpn) and self.object:active_item() == nil)
end

--' Необходимо ли держать оружие в руках
class "eva_state_mgr_weapon_unstrapped" (property_evaluator)
function eva_state_mgr_weapon_unstrapped:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_unstrapped:evaluate()
	return state_lib.states[self.st.target_state].weapon == "unstrapped" or
	       state_lib.states[self.st.target_state].weapon == "fire" or
		   state_lib.states[self.st.target_state].weapon == "sniper_fire"
end
--' Держит ли уже он оружие в руках
class "eva_state_mgr_weapon_unstrapped_now" (property_evaluator)
function eva_state_mgr_weapon_unstrapped_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_unstrapped_now:evaluate()
	local wpn = (rx_wmgr and rx_wmgr.get_wm(self.object):get_weapon()) or self.object:best_weapon()
	return 	self.object:weapon_unstrapped() and		
			self.object:active_item() ~= nil and		
			wpn ~= nil and
			self.object:active_item():id() == wpn:id()
end

--' Необходимо ли спрятать оружие вообще
class "eva_state_mgr_weapon_none" (property_evaluator)
function eva_state_mgr_weapon_none:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_none:evaluate()
	return state_lib.states[self.st.target_state].weapon == "none"			
end
--' Спрятано ли оружие вообще.
class "eva_state_mgr_weapon_none_now" (property_evaluator)
function eva_state_mgr_weapon_none_now:__init(name) super (nil, name)
end
function eva_state_mgr_weapon_none_now:evaluate()
	return self.object:active_item() == nil
end

--' Необходимо ли бросить оружие
class "eva_state_mgr_weapon_drop" (property_evaluator)
function eva_state_mgr_weapon_drop:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_drop:evaluate()
	return state_lib.states[self.st.target_state].weapon == "drop"			
end

--' Необходимо ли стрелять
class "eva_state_mgr_weapon_fire" (property_evaluator)
function eva_state_mgr_weapon_fire:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_weapon_fire:evaluate()
	return state_lib.states[self.st.target_state].weapon == "fire" or
	       state_lib.states[self.st.target_state].weapon == "sniper_fire"
end

--' Достать оружие
class "act_state_mgr_weapon_unstrapp" (action_base)
function act_state_mgr_weapon_unstrapp:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_unstrapp:initialize()
	action_base.initialize(self)
--	self.object:set_item(get_idle_state(self.st.target_state), get_weapon(self.object, self.st.target_state))
end
function act_state_mgr_weapon_unstrapp:execute()
	action_base.execute(self)
	-- обработка случая смены оружия во время экшена
	local wpn = get_weapon(self.object, self.st.target_state)
	if self.weapon ~= (wpn and wpn:id()) then
		self.object:set_item(get_idle_state(self.st.target_state), wpn)
		self.weapon = wpn and wpn:id()
	end
end
function act_state_mgr_weapon_unstrapp:finalize()
	self.weapon = nil
	action_base.finalize(self)
end

--' Спрятать оружие
class "act_state_mgr_weapon_strapp" (action_base)
function act_state_mgr_weapon_strapp:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_strapp:initialize()
	action_base.initialize(self)
end
function act_state_mgr_weapon_strapp:execute()	
	action_base.execute(self)
	local wpn = get_weapon(self.object, self.st.target_state)
	if self.weapon ~= (wpn and wpn:id()) then
		if strappable_weapon(wpn) then
			self.object:set_item(object.strap, wpn)
		else
			self.object:set_item(object.idle, nil)
		end
		self.weapon = wpn and wpn:id()
	end
end
function act_state_mgr_weapon_strapp:finalize()
	self.weapon = nil
	action_base.finalize(self)
end

--' убрать оружие
class "act_state_mgr_weapon_none" (action_base)
function act_state_mgr_weapon_none:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_none:initialize()
	action_base.initialize(self)
	self.object:set_item(object.idle, nil)
end
function act_state_mgr_weapon_none:execute()
	action_base.execute(self)
end
function act_state_mgr_weapon_none:finalize()
	action_base.finalize(self)
end

--' бросить оружие
class "act_state_mgr_weapon_drop" (action_base)
function act_state_mgr_weapon_drop:__init(name, st) super (nil, name)
	self.st = st
end
function act_state_mgr_weapon_drop:initialize()
	action_base.initialize(self)
	local weap = get_weapon(self.object, self.st.target_state)
	if strappable_weapon(weap) then
		self.object:set_item(object.drop, weap)
		-- Только оружие в руках
		if isMagazinedWeapon(weap) then
			amk.start_timer("unload_wpn_time", 1, weap:id())
		else
			weap:unload_magazine()
		end
	else
		self.object:set_item(object.idle, nil)
	end
	amk.start_timer("wpn_cond_time", 1, weap:id())
end
function act_state_mgr_weapon_drop:execute()
	local weap = get_weapon(self.object, self.st.target_state)
	action_base.execute(self)
end
function act_state_mgr_weapon_drop:finalize()
	action_base.finalize(self)
end

function get_idle_state(target_state)
	if state_lib.states[target_state].mental == anim.danger and
	   state_lib.states[target_state].movement == move.stand and
	   state_lib.states[target_state].animation == nil
	then
		return object.aim1
	else
		return object.idle
	end
end

function get_weapon(obj, target_state)
	if state_lib.states[target_state].weapon_slot == nil then
		return (rx_wmgr and rx_wmgr.get_wm(obj):get_weapon()) or obj:best_weapon()
	else
		return obj:item_in_slot(state_lib.states[target_state].weapon_slot)
	end
end

local strappableWeapons = {
    [clsid.wpn_vintorez_s] = true,
    [clsid.wpn_ak74_s] = true,
    [clsid.wpn_lr300_s] = true,
    [clsid.wpn_shotgun_s] = true,
    [clsid.wpn_bm16_s] = true,
    [clsid.wpn_svd_s] = true,
    [clsid.wpn_svu_s] = true,
    [clsid.wpn_rpg7_s] = true,
    [clsid.wpn_val_s] = true,
    [clsid.wpn_groza_s] = true
}
function strappable_weapon(obj)
	if obj == nil then return false end
    local id = obj:clsid()
    return (id and strappableWeapons[id])
end

function get_queue_params(npc, target)
	return 3, 1000
end