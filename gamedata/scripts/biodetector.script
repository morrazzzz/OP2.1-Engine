-------------------------------------------------------------------------
-- ƒинамический биорадар с локатором, затуханием и универсальным худом --
-------------------------------------------------------------------------
local fading = true				-- затухание (без локатора не работает)

local counter = 1
local max_count = 100	-- количество отображаемых объектов
local max_dist = 60
local screen_max_dist = 100
local max_dist_rel = screen_max_dist/max_dist
local biomap_x_offset = 2	-- смещение начала рисунка от правого кра€ текстуры
local biomap_y_offset = 16	-- смещение начала рисунка от верхнего кра€ текстуры
-- все координаты и размеры должны совпадать с указанными в конфиге текстуры
local biomap_width = 256									
local biomap_heigth = 256
-- верхний левый угол окна
local biomap_x = 1024-biomap_width+biomap_x_offset		-- = 770
local biomap_y = -biomap_y_offset						-- = -16	
local center_x = biomap_x+biomap_width/2
local center_y = biomap_y+biomap_heigth/2
-- коэф. сжати€ в зависимоcти от разрешени€
local new_x, new_y
local old_x = 0
local old_y = 0
local koef_x = 1
local delta_x = 0

local dots = {}
local tex = [[biomap\white_dot]]
local actor_id = db.actor:id()
local detectorShowed = false
local math_pi_180 = 180/math.pi
local two_pi = 2*math.pi
local biomap			 -- худ, окно вращающегос€ локатора
local angle = 0			 -- текущий угол локатора в радианах
local step_angle = 1.5/math_pi_180 -- шаг за апдейт в радианах (скорость поворота)
local alpha = 255			-- степень затухани€
local min_alpha = 0.2		-- % от полной €ркости в самом темном участке (интенсивность затухани€)

local colors = {
	["npcs"] = {
		["dog_"]		= {
			["color"]	= { 252, 158,  66},
			["parts"]	= {"part_dog_tail"}
		},
		["bloodsucker"]	= {
			["color"]	= { 255,   0, 120},
			["parts"]	= {"part_krovosos_jaw", "part_krovosos_red_jaw"}
		},
		["new_hell"]	= {
			["color"]	= { 192,  60, 196},
			["parts"]	= {"part_raptor_kogot"}
		},
		["rat_"]		= {
			["color"]	= {   1,   1, 254},
			["parts"]	= {"part_spleen_rat"}
		},
		["volkodav"]	= {
			["color"]	= {   1,   1, 254},
			["parts"]	= {"part_spleen_rat"}
		},
		["kikimora"]	= {
			["color"]	= {   1,   1, 254},
			["parts"]	= {"part_spleen_rat"}
		},
		["molerat"]		= {
			["color"]	= {   1,   1, 254},
			["parts"]	= {"part_spleen_rat"}
		},
		["pseudodog"]	= {
			["color"]	= { 171,  94,  23},
			["parts"]	= {"part_psevdodog_tail"}
		},
		["psy_dog"]		= {
			["color"]	= { 171,  94,  23},
			["parts"]	= {"part_psevdodog_tail"}
		},
		["tushkano"]	= {
			["color"]	= { 64, 255, 255},
			["parts"]	= {"part_face_tushkano"}
		},
		["rotan"]		= {
			["color"]	= { 64, 155, 155},
			["parts"]	= {"part_rotan_heart"}
		},
		["carlic"]		= {
			["color"]	= { 64, 255, 255},
			["parts"]	= {"part_carlic_hand"}
		},
		["karlito"]		= {
			["color"]	= { 64, 255, 255},
			["parts"]	= {"part_carlic_hand"}
		},
		["tarakan"]		= {
			["color"]	= { 255,   0, 120},
			["parts"]	= {"part_tarakan_strong", "part_tarakan"}
		},
		["fracture"]	= {
			["color"]	= {  94,   3,  80},
			["parts"]	= {"part_fracture_hand"}
		},
		["bibliotekar"]	= {
			["color"]	= {  94,   3,  80},
			["parts"]	= {"part_digitis_biblio"}
		},
		["deathclaw"]	= {
			["color"]	= {  94,   3,  80},
			["parts"]	= {"part_deathclaw_antler"}
		},
		["flesh"]		= {
			["color"]	= {  64, 153,  79},
			["parts"]	= {"part_flesh_eye"}
		},
		["zanoza"]		= {
			["color"]	= {  64, 153,  79},
			["parts"]	= {"part_zanoza_leg"}
		},
		["cat"]			= {
			["color"]	= { 252, 158,  66},
			["parts"]	= {"part_tail_cat"}
		},
		["burer"]		= {
			["color"]	= {   0, 238, 255},
			["parts"]	= {"part_burer_hand", "part_burer_red_hand"}
		},
		["snork"]		= {
			["color"]	= { 145,  71, 214},
			["parts"]	= {"part_snork_leg"}
		},
		["nosales"]		= {
			["color"]	= { 64, 255, 255},
			["parts"]	= {"part_face_tushkano"}
		},
		["vypolzen"]	= {
			["color"]	= { 145,  71, 214},
			["parts"]	= {"part_vypolzen_hrebet"}
		},
		["controller"]	= {
			["color"]	= {   0, 238, 255},
			["parts"]	= {"part_hand_kontroler"}
		},
		["kontroller"]	= {
			["color"]	= {   0, 238, 255},
			["parts"]	= {"part_hand_kontroler"}
		},
		["psyonik"]		= {
			["color"]	= {   0, 238, 255},
			["parts"]	= {"part_hand_kontroler"}
		},
		["gigant"]		= {
			["color"]	= { 255,   0, 255},
			["parts"]	= {"part_psevdogigant_hand"}
		},
		["zombie_plague"] = {
			["color"]	= { 127, 127, 127},
			["parts"]	= {"part_plague_hand"}
		},
		["zombie"]		= {
			["color"]	= { 127, 127, 127},
			["parts"]	= {"part_zombie_hand", "part_zombie_teeth", "part_rudiment_big"}
		},
		["vodjanoj"]	= {
			["color"]	= { 127, 127, 127},
			["parts"]	= {"part_zombie_hand", "part_zombie_teeth", "part_rudiment_big"}
		},
		["ghoul_"]		= {
			["color"]	= { 127, 127, 127},
			["parts"]	= {"part_zombie_hand", "part_zombie_teeth", "part_rudiment_big"}
		},
		["polter"]		= {
			["color"]	= {   0, 238, 255},
			["parts"]	= {"part_poltergeist_glas"}
		},
		["chimera"]		= {
			["color"]	= { 255,   0,   0},
			["parts"]	= {"part_chimera_kogot"}
		},
		["lican"]		= {
			["color"]	= { 255,   128,   0},
			["parts"]	= {"part_fang_wolf"}
		},
		["winger"]		= {
			["color"]	= { 255,   128,   0},
			["parts"]	= {"part_winger_liver"}
		},
		["stinger"]		= {
			["color"]	= { 255,   128,   0},
			["parts"]	= {"part_winger_liver"}
		},
		["oboroten"]	= {
			["color"]	= { 255,   0,   0},
			["parts"]	= {"part_chimera_kogot"}
		},
		["boar"]		= {
			["color"]	= {  64, 153,  79},
			["parts"]	= {"part_boar_leg"}
		},
		["bear"]		= {
			["color"]	= {  64, 153,  79},
			["parts"]	= {"part_boar_leg"}
		},
		["spider"]		= {
			["color"]	= { 164, 153,  79},
			["parts"]	= {"part_spider_gland"}
		},
		["arahnid"]		= {
			["color"]	= { 164, 153,  79},
			["parts"]	= {"part_spider_gland"}
		}
	},
	["stalker"]		= { 255, 255,   0},
	["corpse"]		= { 127, 127, 127},
	["actor"]		= {   0, 255,   0}
}

function getColor(obj)
	if obj:id() == db.actor:id() then
		return colors["actor"]
	else
		if IAmAStalker[obj:clsid()] then
			if obj:alive() then
				return colors["stalker"]
			else
				return colors["corpse"]
			end
		else
			local sect = sectFound(obj:section())
			if sect then
				local sectData = colors["npcs"][sect]
				local partOnBelt = db.actor:item_in_slot("bioradar2",inventory_slots.BIODEV)
				if not partOnBelt then
					for i = 1, #sectData["parts"] do
						if _G.Inventory:on_belt(sectData["parts"][i]) then
							partOnBelt = true
							break
						end
					end
				end
				
				if partOnBelt then
					if obj:alive() then
						return sectData["color"]
					else
						return colors["corpse"]
					end 
				else
					return nil
				end
			else
				return nil
			end
        end
    end
end

function sectFound(sect)
	local result
	local str_fnd = string.find
	for k, v in pairs(colors["npcs"]) do
		if str_fnd(sect, k) then
			result = k
			break
        end
    end
	return result
end

local upd_shift, upd_num = 10, 0
function update(delta)
	if delta < upd_shift then
		if upd_num < upd_shift then
			upd_num = upd_num + delta
			return
		else
			upd_num = 0
		end
	end
--    local t = profile_timer()
--    t:start()
	if (db.actor:item_in_slot("bioradar2",inventory_slots.BIODEV) or db.actor:item_in_slot("bioradar2",inventory_slots.BIODEV)) and not bind_actor.scopeUsed then
		detectorShowed = true
		--console:execute("load ~~~ biomap on belt")
		
		new_x = screen.width
		new_y = screen.height
		if new_x ~= old_x or new_y ~= old_y then
			old_x = new_x
			old_y = new_y
			koef_x = (new_y/new_x)/(768/1024)
			-- прив€зываем к правому краю экрана
			delta_x = 0
			if koef_x > 1 then												-- 1280*1024 (чуть выт€нуто по Y)
				delta_x = 2
			elseif koef_x < 1 then											-- широкоформат
				delta_x = 20
			end
			biomap_x = 1024-biomap_width+biomap_x_offset+delta_x			-- 770 без дельты - базовое расширение движка
			center_x = biomap_x+biomap_width/2
			biodetectorRemove()
			--console:execute("load ~~~ biomap created, koef_x: "..koef_x..", new_x: "..new_x..", biomap_x: "..biomap_x)
		end
		if not hud:GetCustomStatic("biomap") then
			biomap=hud:AddCustomStatic("biomap", true):wnd()
			biomap:SetWndPos(biomap_x, biomap_y)
			if db.dynamic_bioradar then
				biomap = hud:AddCustomStatic("biomap_sweep", true):wnd()
				biomap:SetWndPos(biomap_x, biomap_y)
			end
		end
		
		local actorPos = db.actor:position()
		local objPos, x, y, dir, color, corner, clsid
		local custom_static
		local dotName
		local vect
		local sdir = screen.cam_dir
		
		-- вращение локатора. угол от 0 до 2ѕи
		if db.dynamic_bioradar then
			angle=angle-step_angle
			if angle < 0 then
				angle = angle+two_pi
			end
			biomap:SetHeading(angle) -- поворачиваем локатор
		end

		counter = 1
		for id,obj in pairs(db.creatures) do
			clsid = obj:clsid()
			objPos = obj:position()
			if objPos:distance_to_xz(actorPos) <= max_dist and (IAmAStalker[clsid] or IAmAMonster[clsid]) then
				-- определ€ем цвет
				color = getColor(obj)
				if color then -- есть цвет - рисуем
					-- получаем координаты точки
					dir = objPos:sub(actorPos)
					vect = vector_rotate_y(vector():set(dir.x*max_dist_rel, 0, -dir.z*max_dist_rel), math.atan2(-sdir.x, sdir.z)*math_pi_180)
					-- абсолютные координаты точки
					x = vect.x*math.sqrt(koef_x)
					y = vect.z
					
					-- вычисл€ем альфу
					alpha = 255
					if db.dynamic_bioradar and fading and id ~= actor_id then			-- актор в центре не затухает
						-- затухание в зависимости о углового рассто€ни€ до локатора. все переводим в диапазон от 0 до 2ѕи иначе глючит
						corner = math.atan2(x,y)-angle+math.pi/2
						while corner < 0 do
							corner = corner+two_pi
						end
						--console:execute("load ~~~ atan2(x,y) "..math.atan2(x,y)..", angle: "..angle)
						
						alpha = (1-corner/(two_pi))					-- % затухани€
						alpha = 255*(alpha+min_alpha*(1-alpha))		-- интенсивность
						--console:execute("load ~~~ corner: "..corner..", alpha: "..alpha)
					end
					color = GetARGB(alpha,color[1],color[2],color[3]) 
					
					-- координаты точки относительно биорадара
					x = x+center_x
					y = y+center_y
					--console:execute("load ~~~ dot created, x: "..x..", y: "..y)

					-- рисуем точку
					dotName = "target_dot_"..counter
					custom_static = hud:GetCustomStatic(dotName)
					if not custom_static then
						custom_static = hud:AddCustomStatic(dotName, true)
						custom_static:wnd():InitTexture(tex)
					end
					custom_static:wnd():SetColor(color)
					custom_static:wnd():SetWndPos(x, y)
					dots[counter] = true
					counter = counter+1
					if counter > max_count then
						break
					end
				end
			end
		end
		if counter<=max_count then
			-- зачистка неактуальных точек
			for i = counter, max_count do
				if dots[i] then
					hud:RemoveCustomStatic("target_dot_"..i)
					dots[i] = nil
				end
			end
		end
	else
		if detectorShowed then
			biodetectorRemove()
		end
	end
--    t:stop()
--    console:execute("load ~~~ TIME SPEND biodetector.update(): "..t:time())
end

function biodetectorRemove()
	detectorShowed = false
	if hud:GetCustomStatic("biomap") then
		hud:RemoveCustomStatic("biomap")
		-- убираем вращающийс€ локатор
		if hud:GetCustomStatic("biomap_sweep") then
			hud:RemoveCustomStatic("biomap_sweep")
		end
		--console:execute("load ~~~ biomap removed: "..tostring(hud:GetCustomStatic("biomap")))
	end
	if dots then
		local dotName
		for i = 1, max_count do
			if dots[i] then
				dotName = "target_dot_"..i
				if hud:GetCustomStatic(dotName) then
					hud:RemoveCustomStatic(dotName)
				end
			end
		end
		dots = {}
	end
end