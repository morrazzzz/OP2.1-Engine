-- Трансмутатор
oDevice = nil
local aArtsInfo = nil		-- table данные артов в инвентаре
local aArtsInventory = nil  -- table список объектов артов в инвентаре
local aInterval = nil		-- integer кол-во ячеек в инв. скролле
local aRecInterval = nil	-- integer кол-во ячеек в рецептном скролле
local aAnomaly = nil		-- string секция аномалии вблизи
local anomaly_name = nil	-- string название аномалии
local txtNotkomp = ""		-- string название недостающих компонентов
local txtVremya = ""		-- string время варки
local aRecipts = nil		-- table все рецепты для аномалии
local aReciptsHave = nil	-- table имеющиеся у ГГ рецепты для аномалии
local aRecsInfo = nil		-- table данные результатов варки для рецептного скролла
local aRecSections = nil	-- table список секций артов в рецептном скролле
local aAnomId = nil			-- integer id аномалии вблизи
local iInfo = nil			-- string название инфопоршня рецепта

--	Инфа для кнопок на скроллбаре
local aScrollBar = {
	{x =  73, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 128, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 183, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 238, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 293, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 348, y = 155,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

--	Инфа для кнопок на панели артефактов
local aCmpnSlots = {
	{x =  73, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 128, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 183, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 238, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 293, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 348, y = 58,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

--	Инфа для кнопок на рецептбаре
local aRecBar = {
    {x =  92,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
    {x = 171,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
    {x = 251,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil},
	{x = 329,  y = 235,  wt = 50, hg = 50, oSlot = nil, iSectIndex = nil}
}

local oRes = nil
local oNotkomp = nil

-- 	Заспавнить предмет в инвентарь к актору
function amkCreateItemActor(sItemSection)
	if sItemSection then
		return create(sItemSection, db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
	end
end

function amkDelObj(iId)
	if iId then
		local sobj = server_object(iId)
		if sobj then
			release(sobj)
		end
	end
end	

--	Включить девайс
function amkEnableDevice()
	if oDevice or db.actor:alive()~=true then return end
	amkCreateItemActor("amk_transmutator")
	
	aArtsInfo = {}
	aRecsInfo = {}
	aRecSections = {}
	aArtsInventory = {}
	aInterval = {1,6}
	aRecInterval = {1,4}	
	local aid,apos,arad,adist=amk_anoms.get_nearest_anomaly(db.actor) 
	if aid and arad - adist > -2 then
		local an = level_object(aid)
		if an then
			aAnomaly = an:name()
			aAnomId = aid
		end	
	end
	-- если вблизи есть аномалия, заполняем таблицу с рецептами
	if aAnomaly then
		aRecipts,anomaly_name = amk_mod.fill_recepti_est(aAnomaly)
		aReciptsHave = {}
		if type(aRecipts)=="table" then
			for info, recept in pairs(aRecipts) do
				if has_info(info) then -- у ГГ есть такой рецепт: заносим в таблицу
					aReciptsHave[info] = {}
					for k, v in pairs(recept) do -- копируем рецепт
						if type(v) == "table" then
							aReciptsHave[info][k] = {}
							for i, j in pairs(v) do
								aReciptsHave[info][k][i] = j
							end
						else
							aReciptsHave[info][k] = v
						end
						if k == "cel" then
							for m, n in pairs(v) do
								-- console:execute("load ~#I#:"..string.format(" aRecSections: "..m))
								local uje_est = false
								for i=1, table.getn(aRecSections) do
									if aRecSections[i] == m then
										uje_est = true
									end
								end
								if not uje_est then
									table.insert(aRecSections,m)								
								end
								-- break
							end
						end
					end
				end
			end
		end
	end
	CAmkMergerArtefact()
	oDevice = CAmkDeviceTransmutator()
	level.start_stop_menu(oDevice, true)
end

--	Выключить девайс
function amkDisableDevice()	
	if oRes then oDevice:DetachChild(oRes) end
	if oNotkomp then oDevice:DetachChild(oNotkomp) end
	oDevice	= nil
	aArtsInfo  = nil
	aRecsInfo = nil
	aRecSections = nil
	aArtsInventory 	= nil
	aInterval = nil
	aRecInterval = nil
	aAnomaly = nil
	aAnomId = nil
	iInfo = nil
	aReciptsHave = nil
	aRecipts = nil
	oRes = nil
	oNotkomp = nil
	for k,tbl in pairs(aScrollBar) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aCmpnSlots) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aRecBar) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
end

function amkUseTransmutator(oItem)
	if oItem:section() == "amk_transmutator" then 
		transmutator.amkEnableDevice()
	end
end

function get_anom_name(str)
	local s_name
	if anomaly_name	~= nil then
		s_name = anomaly_name
	else
		s_name = "Неизвестно"
	end
	return s_name
end

class "CAmkMergerArtefact"

function CAmkMergerArtefact:__init()
	self:IterateInventory()
	if table.getn(aArtsInventory) > 0 then
		self:SaveInfo("Inv")		
	end	
	if table.getn(aRecSections) > 0 then
		self:SaveInfo("Rec")
	end
end

--	Итерация по инвентарю актора и поиск в нем артов
function CAmkMergerArtefact:IterateInventory()
	db.actor:iterate_inventory(function(npc, item)
		if amk_mod.is_komponent(item:section()) then		
			table.insert(aArtsInventory, item)
		end 
	end, db.actor)
end

--	Собираем и сохраняем в нужном нам виде информацию об артах и рецептах
--	@param	string	iBarName		Тип скролла для сохранения (инвентарный - "Inv" / рецептный - "Rec")
function CAmkMergerArtefact:SaveInfo(iBarName)
	local aTmpTbl = {}	
	local searchTbl, fillTbl
	if iBarName == "Inv" then
		searchTbl = aArtsInventory
		fillTbl = aArtsInfo
	else
		searchTbl = aRecSections
		fillTbl = aRecsInfo
	end
	for iKey, oArt in pairs(searchTbl) do
		local sSection = nil
		if iBarName == "Inv" then
			sSection = oArt:section()
		else
			sSection = oArt
		end
		if config:section_exist(sSection) then			
			if not aTmpTbl[sSection] then
				aTbl = {}
				aTbl.iCount = 1
				aTbl.sSection = sSection
				aTbl.x = config:r_u32(sSection, "inv_grid_x")
				aTbl.y = config:r_u32(sSection, "inv_grid_y")
				aTbl.w = config:r_u32(sSection, "inv_grid_width")
				aTbl.h = config:r_u32(sSection, "inv_grid_height")
				aTbl.aArts = {}
				table.insert(aTbl.aArts, oArt)
				aTmpTbl[sSection] = aTbl
			elseif iBarName == "Inv" then
				aTbl = aTmpTbl[sSection]
				aTbl.iCount = aTbl.iCount + 1
				table.insert(aTbl.aArts, oArt)
			end
		end
	end	
	for sKey, aValue in pairs(aTmpTbl) do
		table.insert(fillTbl, aValue)
	end
end

class "CAmkDeviceTransmutator" (CUIScriptWnd)

function CAmkDeviceTransmutator:__init() super()	
	self:InitInterface()	
	self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec")
end

--	Инициализация окна и статических элементов управления
function CAmkDeviceTransmutator:InitInterface()	
	self:Init(50,50,531,359)
	--	Прикрепляем статический элемент 'фон'
	self.oBackGround = CUIStatic()
    self.oBackGround:SetWindowName("oBackGround") 
    self.oBackGround:SetAutoDelete(true)
    self.oBackGround:InitTexture("ui\\amk_transmutator")
	self.oBackGround:SetOriginalRect(3,7,531,359)  
    self.oBackGround:Init(3,7,531,359) 
    self:AttachChild(self.oBackGround)
	
	--	Прикрепляем кнопку очистки панели компонентов для варки
	self.oButtonClear = CUIButton()
	self.oButtonClear:SetWindowName("oButtonClear")  
	self.oButtonClear:SetAutoDelete(true)
	self.oButtonClear:InitTexture("ui\\amk_transmutator")
	self.oButtonClear:SetOriginalRect(248,365,23,39)
    self.oButtonClear:Init(420,62,23,39)
    self:AttachChild(self.oButtonClear)
    self:AddCallback("oButtonClear", ui_events.BUTTON_CLICKED, self.ClearSlots, self)

	--	Прикрепляем текстовый индикатор аномалии
	self.oaAnomaly = CUIStatic()
	self.oaAnomaly:SetWindowName("oaAnomaly")
	self.oaAnomaly:SetAutoDelete(true)
	if aAnomaly~=nil then
		self.oaAnomaly:SetText(get_anom_name(tostring(aAnomaly)))
	else
		self.oaAnomaly:SetText("")
	end
	self.oaAnomaly:SetTextColor(255,238,153,26)
	self.oaAnomaly:SetFont(GetFontGraffiti22Russian())	 		
    self.oaAnomaly:Init(30,306,1200,25)
    self:AttachChild(self.oaAnomaly)

	--	Прикрепляем кнопку завершения работы 'выход'
	self.oButtonQuit = CUIButton()
	self.oButtonQuit:SetWindowName("oButtonQuit")  
	self.oButtonQuit:SetAutoDelete(true)
	self.oButtonQuit:InitTexture("ui\\amk_transmutator")
	self.oButtonQuit:SetOriginalRect(124,393,92,25)
	self.oButtonQuit:SetText("Выход")
	self.oButtonQuit:SetTextColor(255,238,153,26)
	self.oButtonQuit:SetFont(GetFontGraffiti19Russian())
	self.oButtonQuit:Init(406,302,92,25)
    self:AttachChild(self.oButtonQuit)
    self:AddCallback("oButtonQuit", ui_events.BUTTON_CLICKED, self.Quit, self)
	
	--	Прикрепляем кнопку на старт трансмутации 'старт'
	self.oButtonStart = CUIButton()
	self.oButtonStart:SetWindowName("oButtonStart")  
	self.oButtonStart:SetAutoDelete(true)
	self.oButtonStart:InitTexture("ui\\amk_transmutator")
	self.oButtonStart:SetOriginalRect(124,393,92,25)		
	self.oButtonStart:SetText("Запуск")
	self.oButtonStart:SetTextColor(255,238,153,26)
	self.oButtonStart:SetFont(GetFontGraffiti19Russian())
    self.oButtonStart:Init(189,302,92,25)	
    self:AttachChild(self.oButtonStart)
    self:AddCallback("oButtonStart", ui_events.BUTTON_CLICKED, self.Start, self)

	--	Прикрепляем кнопку управления СкроллБаром 'налево'
	self.oButtonPrevLeft = CUIButton()
	self.oButtonPrevLeft:SetWindowName("oButtonPrevLeft")  
	self.oButtonPrevLeft:SetAutoDelete(true)
	self.oButtonPrevLeft:InitTexture("ui\\amk_transmutator")
	self.oButtonPrevLeft:SetOriginalRect(9,393,39,23)
    self.oButtonPrevLeft:Init(24,167,39,23)	
    self:AttachChild(self.oButtonPrevLeft)
    self:AddCallback("oButtonPrevLeft", ui_events.BUTTON_CLICKED, self.PreviewScrollLeft, self)

	--	Прикрепляем кнопку управления СкроллБаром 'направо'
	self.oButtonPrevRight = CUIButton()
	self.oButtonPrevRight:SetWindowName("oButtonPrevRight")  
	self.oButtonPrevRight:SetAutoDelete(true)
	self.oButtonPrevRight:InitTexture("ui\\amk_transmutator")
	self.oButtonPrevRight:SetOriginalRect(52,393,39,23)
    self.oButtonPrevRight:Init(404,167,39,23)	
    self:AttachChild(self.oButtonPrevRight)
    self:AddCallback("oButtonPrevRight", ui_events.BUTTON_CLICKED, self.PreviewScrollRight, self)

	--	Прикрепляем кнопку управления РецептБаром 'налево'
	self.oButtonRecLeft = CUIButton()
	self.oButtonRecLeft:SetWindowName("oButtonRecLeft")  
	self.oButtonRecLeft:SetAutoDelete(true)
	self.oButtonRecLeft:InitTexture("ui\\amk_transmutator")
	self.oButtonRecLeft:SetOriginalRect(9,393,39,23)
    self.oButtonRecLeft:Init(24,246,39,23)	
    self:AttachChild(self.oButtonRecLeft)
    self:AddCallback("oButtonRecLeft", ui_events.BUTTON_CLICKED, self.ReceptScrollLeft, self)

	--	Прикрепляем кнопку управления РецептБаром 'направо'
	self.oButtonRecRight = CUIButton()
	self.oButtonRecRight:SetWindowName("oButtonRecRight")  
	self.oButtonRecRight:SetAutoDelete(true)
	self.oButtonRecRight:InitTexture("ui\\amk_transmutator")
	self.oButtonRecRight:SetOriginalRect(52,393,39,23)
    self.oButtonRecRight:Init(404,246,39,23)	
    self:AttachChild(self.oButtonRecRight)
    self:AddCallback("oButtonRecRight", ui_events.BUTTON_CLICKED, self.ReceptScrollRight, self)
end

--	Инициализируем элементы нашего псевдо СкроллБара.
--	@param	integer	iStartIndex	Стартовый индекс для таблицы артефактов.
--	@param	integer	iFinalIndex	Финальный индекс для таблицы артефактов.
--	@param	string	iBarName		Тип скролла для апдейта (инвентарный - "Inv" / рецептный - "Rec").
function CAmkDeviceTransmutator:UpdScrollBar(iStartIndex, iFinalIndex, iBarName)
	local iCurrentButton = 0
	for iSectIndex = iStartIndex, iFinalIndex do
		local aButton, aSectInfo
		iCurrentButton = iCurrentButton + 1
		if iBarName == "Inv" then
			aButton = aScrollBar[iCurrentButton]
			aSectInfo = aArtsInfo[iSectIndex]
		elseif iBarName == "Rec" then
			aButton = aRecBar[iCurrentButton]
			aSectInfo = aRecsInfo[iSectIndex]
		end

		--	Очищаем обьект кнопки из таблицы видимых элементов
		if aButton.oSlot then
			self:DetachChild(aButton.oSlot)
			aButton.oSlot = nil
		end

		--	Завершаем апдейт скролла если уже нет элементов для инициализации
		if not aSectInfo then
			return
		end

		--	Получаем позицию иконки
		local x = aSectInfo.x * 50
		local y = aSectInfo.y * 50
		local w = aSectInfo.w * 50
		local h = aSectInfo.h * 50

		--	Создаем псевдо слот для арта
		local oScrollButton = CUIButton()
		oScrollButton:SetWindowName("oScrollButton"..iSectIndex..iBarName)
		oScrollButton:SetAutoDelete(true)	
		if aSectInfo.iCount ~= 0 then
			oScrollButton:InitTexture("ui\\ui_icon_equipment")
			oScrollButton:SetOriginalRect(x, y, w, h)
			oScrollButton:SetStretchTexture(true)
		end		
		if aSectInfo.iCount > 1 then
			oScrollButton:SetText(tostring(aSectInfo.iCount))
			oScrollButton:SetTextColor(255,238,153,26)
			oScrollButton:SetFont(GetFontGraffiti19Russian())
		end	 		
		oScrollButton:Init(aButton.x, aButton.y, aButton.wt, aButton.hg)
		self:AttachChild(oScrollButton)
		local sFuncString = "transmutator.oDevice:AddArtefact("..iSectIndex..",\""..iBarName.."\")"
		self:AddCallback("oScrollButton"..iSectIndex..iBarName, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self)
		aButton.oSlot = oScrollButton	
	end
end

--	Полистать СкроллБар влево
function CAmkDeviceTransmutator:PreviewScrollLeft()
	if aArtsInfo[aInterval[1] - 1] and aArtsInfo[aInterval[2] - 1] then
		aInterval = {aInterval[1] - 1, aInterval[2] - 1}
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv") -- inventory scrollbar
	end
end

--	Полистать СкроллБар вправо
function CAmkDeviceTransmutator:PreviewScrollRight()
	if aArtsInfo[aInterval[1] + 1] and aArtsInfo[aInterval[2] + 1] then
		aInterval = {aInterval[1] + 1, aInterval[2] + 1}
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv") -- inventory scrollbar
	end
end

--	Полистать РецептБар влево
function CAmkDeviceTransmutator:ReceptScrollLeft()
	if aRecsInfo[aRecInterval[1] - 1] and aRecsInfo[aRecInterval[2] - 1] then
		aRecInterval = {aRecInterval[1] - 1, aRecInterval[2] - 1}
		self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec") -- recipts bar
	end
end

--	Полистать РецептБар вправо
function CAmkDeviceTransmutator:ReceptScrollRight()
	if aRecsInfo[aRecInterval[1] + 1] and aRecsInfo[aRecInterval[2] + 1] then
		aRecInterval = {aRecInterval[1] + 1, aRecInterval[2] + 1}
		self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec") -- recipts bar
	end
end

--	Виндим клавиши для управления
function CAmkDeviceTransmutator:OnKeyboard(DIK, KeyboardAction)
	CUIScriptWnd.OnKeyboard(self, DIK, KeyboardAction)
	if KeyboardAction == ui_events.WINDOW_KEY_PRESSED then
		if DIK == DIK_keys.DIK_ESCAPE then
			self:Quit()
		end
	end
	return true
end

--	Инициализация слота для результата трансмутации.
--	@param	string	sArtSection	Секция артефакта, результата трансмутации.
function CAmkDeviceTransmutator:InitResultButton(sArtSection)	
	local ini = config	
	if ini:section_exist(sArtSection) then
		
		--	Получаем координаты для иконки
		local x = ini:r_u32(sArtSection, "inv_grid_x") * 50
		local y = ini:r_u32(sArtSection, "inv_grid_y") * 50
		local w = ini:r_u32(sArtSection, "inv_grid_width") * 50
		local h = ini:r_u32(sArtSection, "inv_grid_height") * 50

		--	Инициализация слота
		oRes = CUIButton()	
		oRes:SetWindowName("oButtonResult")  
		oRes:SetAutoDelete(true)	
		oRes:InitTexture("ui\\ui_icon_equipment")
		oRes:SetOriginalRect(x, y, w, h)		
		oRes:SetStretchTexture(true)		
		oRes:Init(430, 69, 50, 50)
		self:AttachChild(oRes)
		self:AddCallback("oButtonResult", ui_events.BUTTON_CLICKED, self.UpdateDevice, self)	
	end			
end

function CAmkDeviceTransmutator:UpdateDevice()	
	aArtsInfo		= {}
	aArtsInventory 	= {}
	aRecsInfo		= {}
	aRecSections	= {}	
	aInterval		= {1,6}
	aRecInterval	= {1,4}
	CAmkMergerArtefact()
	
	self:DetachChild(oRes)
	oRes = nil
	self:DetachChild(oNotkomp)
	oNotkomp = nil
	
	for k,tbl in pairs(aScrollBar) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aCmpnSlots) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aRecBar) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec")
end

--	Добавить артефакт на панель активных компонентов
--	@param	integer	iSectIndex	Индекс секции артефакта который нужно добавить в слот.
--	@param	string	iBarName		Тип скролла для апдейта (инвентарный - "Inv" / рецептный - "Rec").
function CAmkDeviceTransmutator:AddArtefact(iSectIndex, iBarName)	
	if oRes ~= nil then
		self:UpdateDevice()
		return
	end
	local aSectInfo
	if iBarName == "Inv" then
		aSectInfo = aArtsInfo[iSectIndex]
	else -- "Rec"
		transmutator.oDevice:ClearSlots()
		txtNotkomp = ""
		txtVremya  = ""
		if oNotkomp then oDevice:DetachChild(oNotkomp) end
		oNotkomp = nil
		aSectInfo = aRecsInfo[iSectIndex]
	end
	if aSectInfo.iCount == 0 then
		return
	end

	--	Итерируем по панели компонентов и ищем свободный слот
	if iBarName == "Inv" then
		for iKey, aButton in pairs(aCmpnSlots) do
			if aButton.oSlot == nil then
				aSectInfo.iCount = aSectInfo.iCount - 1

				--	Получаем координаты иконки
				local x = aSectInfo.x * 50
				local y = aSectInfo.y * 50
				local w = aSectInfo.w * 50
				local h = aSectInfo.h * 50

				--	Инициализируем псевдо слот (кнопку)
				local oCmpnSlot = CUIButton()
				oCmpnSlot:SetWindowName("oCmpnSlot"..iKey)  
				oCmpnSlot:SetAutoDelete(true)		
				oCmpnSlot:InitTexture("ui\\ui_icon_equipment")
				oCmpnSlot:SetOriginalRect(x,y,w,h)
				oCmpnSlot:SetStretchTexture(true)
				oCmpnSlot:Init(aButton.x, aButton.y, aButton.wt, aButton.hg)	
				self:AttachChild(oCmpnSlot)
				local sFuncString = "transmutator.oDevice:DelArtefact("..iKey..")"
				self:AddCallback("oCmpnSlot"..iKey, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self)

				--	Сохраняем данные
				aButton.oSlot = oCmpnSlot
				aButton.iSectIndex = iSectIndex

				--	Апдейтим СкроллБар
				self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")				
				break
			end
		end
	else
		local ini = config
		for info, recept in pairs(aReciptsHave) do
			if aReciptsHave[info]["cel"][aSectInfo.sSection] then
				for aSect, k in pairs(aReciptsHave[info]["komp"]) do
					if config:section_exist(aSect) then
						for i=1, table.getn(aArtsInfo) do						
							if aArtsInfo[i]["sSection"] == aSect and aArtsInfo[i]["iCount"] ~= 0 then
								self:AddArtefact(i,"Inv")
								aReciptsHave[info]["komp"][aSect] = "added"
							end
						end
					end
				end
				local tblNotKomp = {}
				local CountLostKomp = 0
				for cSect, m in pairs(aReciptsHave[info]["komp"]) do
					if aReciptsHave[info]["komp"][cSect] ~= "added" then
						table.insert(tblNotKomp, game.translate_string(amk.get_inv_name(cSect)))
					end
				end
				if CountLostKomp == 0 then -- есть все компоненты и есть рецепт, смотрим время варки
					local txTime = ""
					local time_var = amk_mod.get_af_transform_param("vremya", aReciptsHave[info], aReciptsHave)
					if type(time_var) == "table" then
						if time_var[1] ~= 0 then
							txTime = time_var[1].." дн "
						end
						if time_var[2] ~= 0 then
							txTime = txTime.." "..time_var[2].." час "
						end
						if time_var[3] ~= 0 then
							txTime = txTime.." "..time_var[3].." мин"
						end
					end
					txtVremya = txTime
					end
				if type(tblNotKomp) == "table" then
					txtNotkomp = table.concat(tblNotKomp, ", ")
				end
			end
		end
		
		if string.len(txtNotkomp) > 0 then
			-- показываем строку недостающих компонентов
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName("oNotkomp")
			oNotkomp:SetAutoDelete(true)
--			oNotkomp:SetText("Не хватает компонентов: "..tostring(txtNotkomp))
			oNotkomp:SetText("Для варки не хватает компонентов")
			oNotkomp:SetTextColor(255,255,0,0)
			oNotkomp:SetFont(GetFontGraffiti19Russian())
			oNotkomp:Init(83,122,470,20)
			self:AttachChild(oNotkomp)
			
		elseif string.len(txtVremya) > 0 then
			-- показываем строку времени варки по рецепту
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName("oNotkomp")
			oNotkomp:SetAutoDelete(true)
			oNotkomp:SetText("Время варки: "..tostring(txtVremya))
			oNotkomp:SetTextColor(255,238,153,26)
			oNotkomp:SetFont(GetFontGraffiti19Russian())
			oNotkomp:Init(140,122,470,20)
			self:AttachChild(oNotkomp)
		end
	end
end

--	Очистка панели компонентов для варки
function CAmkDeviceTransmutator:ClearSlots()
	for iKey, aButton in pairs(aCmpnSlots) do
		if aCmpnSlots[iKey] ~=nil then
			transmutator.oDevice:DelArtefact(iKey)
		end
	end
end

--	Удалить артефакт из панели компонентов.
--	@param	integer	iCmpnSlotIndex	Индекс слота панели компонентов.
function CAmkDeviceTransmutator:DelArtefact(iCmpnSlotIndex)
	aButton = aCmpnSlots[iCmpnSlotIndex]
	aSectInfo = aArtsInfo[aButton.iSectIndex]

	--	Если слот активный, то отключаем его
	if aButton.oSlot then
		self:DetachChild(aButton.oSlot)
		aSectInfo.iCount = aSectInfo.iCount + 1
		aButton.iSectIndex = nil
		aButton.oSlot = nil
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	end
	if oNotkomp then
		self:DetachChild(oNotkomp)
		oNotkomp = nil
		txtNotkomp = ""
		txtVremya  = ""
	end
end

--	Выход
function CAmkDeviceTransmutator:Quit()
	amkDisableDevice()
	self:GetHolder():start_stop_menu(self,true)
end

--	Старт трансмутации
function CAmkDeviceTransmutator:Start()
	-- с пустыми слотами компонентов и вне аномалии не стартуем
	if not aAnomaly then return end
	local count = 0
	for i=1, table.getn(aCmpnSlots) do
		if aCmpnSlots[i] and aCmpnSlots[i].oSlot~=nil and aCmpnSlots[i].iSectIndex~=nil then
			count=count+1
		end
	end
	if count == 0 then return end

	--	Попытаться трансмутировать артефакты
	CAmkTransmutacion()
end

class "CAmkTransmutacion"

function CAmkTransmutacion:__init()
	self.sTransmutants = self:SearchSchemes()
	if self.sTransmutants ~= nil then
		self:CreateAtrefact()
	else
		self:Shooting()
	end
end

--	Поиск подходящей схемы трансмутации
function CAmkTransmutacion:SearchSchemes()
	local sTransmutants
	local aCmpnSects = {}
	for iKey, aButton in pairs(aCmpnSlots) do
		if aCmpnSlots[iKey].iSectIndex ~= nil then
			table.insert(aCmpnSects, aArtsInfo[aCmpnSlots[iKey].iSectIndex].sSection)
		end
	end

	local numArts = table.getn(aCmpnSects)
	for info, recept in pairs(aRecipts) do
		local count = 0
		for k,v in pairs(aRecipts[info]["komp"]) do
			-- считаем ,сколько компонентов в рецепте
			count = count + 1
		end
		if count == numArts then
			for i=1, numArts do
				local af = aCmpnSects[i]			
				if not aRecipts[info]["komp"][af] then
					break
				end
				if i == count then 
					sTransmutants = aRecipts[info]["cel"] --перебрали все арты и есть результат
					iInfo = info
				end
			end
		end
	end
	return sTransmutants
end

--	Создание артефакта трансмутанта
function CAmkTransmutacion:CreateAtrefact()
	-- собираем табличку подготовленных для варки компонентов
	local komp = {}
	local cel = {}
	
	give_info("biznes_remove_special_item")
	for i = 1, table.getn(aCmpnSlots) do
		if aCmpnSlots[i].iSectIndex ~= nil then
			local aButton = aCmpnSlots[i]
			local aArtInfo = aArtsInfo[aButton.iSectIndex]
			--	Вытащить артефакт из базы компонентов.
			local oObject = aArtInfo.aArts[table.getn(aArtInfo.aArts)]
			local obj_sect = oObject:section()
			table.remove(aArtInfo.aArts, table.getn(aArtInfo.aArts))
			--	Удалить артефакт и очистить слот.
			amkDelObj(oObject:id())
			oDevice:DetachChild(aButton.oSlot)
			aCmpnSlots[i].iSectIndex = nil
			aCmpnSlots[i].oSlot = nil
		end
	end
	disable_info("biznes_remove_special_item")

	local cel				= self.sTransmutants
	local komp 				= aRecipts[iInfo]["komp"]
	local v_udachi 			= amk_mod.get_af_transform_param("v_udachi", aRecipts[iInfo], aRecipts)
	local v_virogd 			= amk_mod.get_af_transform_param("v_virogd", aRecipts[iInfo], aRecipts)
	local virogd 			= amk_mod.get_af_transform_param("virogd", aRecipts[iInfo], aRecipts)
	local vremya 			= amk_mod.get_af_transform_param("vremya", aRecipts[iInfo], aRecipts)
	local remove_anomaly 	= amk_mod.get_af_transform_param("remove_anomaly", aRecipts[iInfo], aRecipts)
	local remove_anomaly_id = aAnomId
	local result, udacha 	= amk_mod.af_select_result(v_udachi, v_virogd, virogd, cel, komp)
	local info              = iInfo
	local lv 				= db.actor:level_vertex_id()
	local gv 				= db.actor:game_vertex_id()
	local pos 				= db.actor:position()	
	
	if cel == nil or v_udachi == nil or v_virogd == nil
		or virogd == nil or vremya == nil or remove_anomaly == nil 
		or cel == nil and remove_anomaly == false
		or v_udachi + v_virogd > 100 then		
		-- кривой рецепт  - выходим
		oDevice:Quit()
	end

	-- неудача
	if udacha == false then
		remove_anomaly = false
		info = nil
	end
	level.add_pp_effector("teleport.ppe", 1524, false)

	amk_mod.as_start_universal_transform_timer(komp, result, udacha, pos, vremya, gv, lv, info, remove_anomaly, remove_anomaly_id)
	
	-- на случай если захотим сварить такой же арт (для корректной строки недостающих компонентов)
	if aReciptsHave[iInfo] then
		for cSect, m in pairs(aReciptsHave[iInfo]["komp"]) do
			if aReciptsHave[iInfo]["komp"][cSect] == "added" then
				aReciptsHave[iInfo]["komp"][cSect] = true
			end
		end
	end
end

--	Долбонуть актора из-за того что пихает в девайс все, что попало
function CAmkTransmutacion:Shooting()
	oDevice:Quit()
	level.add_pp_effector("blink.ppe", 234, false)
	local posActor = db.actor:position()
	particles_object("anomaly2\\electra2_blast"):play_at_pos(posActor)
	sound_object("anomaly\\electra_blast1"):play_at_pos(db.actor, posActor)
	local h = hit()
	h.impulse = 0
	h.draftsman = db.actor
	h.direction = vector():set(0,0,0)
	h:bone("bip01_spine")
	h.power = 0.3
	h.type = hit.shock 
	db.actor:hit(h)
end
