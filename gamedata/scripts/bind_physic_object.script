----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Разработчик: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Доработки: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------
function init(obj)
	printf("_bp: init(): name='%s'", obj:name())

	----------------------------------------------------------------------------------------
	-- Старые схемы
	----------------------------------------------------------------------------------------

	local ini = obj:spawn_ini()
	if ini and ini:section_exist("animation") then
		--obj:bind_object(handing_lamp_binder(obj))
		abort("object '%s': animation section is deprecated, use logic + impulse combination",
			obj:name())
		return
	end

	----------------------------------------------------------------------------------------
	-- Новые схемы
	----------------------------------------------------------------------------------------

	-- Биндить предмет нет смысла, если у него нет секции logic
	if not ini or not ini:section_exist("logic") then
		if ini and not ini:section_exist("drop_box") then
			-- Прожектор нужно биндить даже без logic
			if obj:clsid() ~= clsid.projector then
				-- Инвентарные предметы также нужно биндить даже без logic
				if obj:clsid() ~= clsid.inventory_box then 
					-- Машины m_car без логики все равно нужно биндить даже без logic
					if obj:section() ~= "m_car" then 
						return
					end
				end
			end
		end
	end
	
	db.storage[obj:id()] = { }
	local new_binder = generic_physics_binder(obj)
	obj:bind_object(new_binder)
end

---------------------------------------------------------------------------------------------
class "generic_physics_binder" (object_binder)
function generic_physics_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function generic_physics_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_physics_binder:reinit()
	object_binder.reinit(self)

	--printf("generic_physics_binder:reinit()")

	--printf("_bp: generic_physics_binder: %s", self.object:name())
	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
  	if newEngine then
		self.health = self.object:is_car() and self.object:get_car():GetfHealth()	
	else
		self.health = self.object:get_car() and self.object:get_car():GetfHealth()
	end
end

function generic_physics_binder:update(delta)
	object_binder.update(self, delta)

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)        

        --' Запускаем ассоциированный с объектом партикл.
        local particle = utils.cfg_get_string(self.st.ini, self.st.section_logic, "particle", self.object, false, "", nil)
        if particle ~= nil then
            self.particle = particles_object(particle)
            self.particle:play_at_pos(self.object:position())
        end

        --' Дизаблим ассоциированный с объектом граф
        local graph_point_marker = utils.cfg_get_string(self.st.ini, self.st.section_logic, "graph_point_marker", self.object, false, "", nil)
        if graph_point_marker ~= nil then
            self.disable_graph_point = patrol(graph_point_marker):game_vertex_id(0)
            graph:accessible(self.disable_graph_point, false)
            printf("GRAPH POINT DISABLED")
        end
        
      
		 
	end

	if self.st.active_section ~= nil or
		(self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true) or
		self.object:clsid() == clsid.inventory_box
	then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)

		self.object:set_callback(callback.hit, generic_physics_binder.hit_callback, self)
		self.object:set_callback(callback.death, generic_physics_binder.death_callback, self)
		self.object:set_callback(callback.use_object, generic_physics_binder.use_callback, self)

		-- для бтра hit_callback и death_callback не вызывается. заткнём эти дырки.
		if self.health and (not self.nofixonhit) then
		  local health=self.object:get_car() and self.object:get_car():GetfHealth()
		  if health then
			if health < 0 then
				self:btr_death_callback()
			elseif self.health-health>0.001 then
				--console:execute("load ~~~ health: "..self.health)
				--console:execute("load ~~~ health on hit: "..health)
			
				if db.actor:active_item() then
					if weapon_immunity_btr(db.actor:active_item()) then	-- Оружие, против которого у бтр иммунитет
						health = 1

					elseif not weapon_against_btr(db.actor:active_item()) then	-- Усиление бтр против всего, кроме отдельных стволов
						if self.health-health > 0.1 then
							health = self.health-0.1
						end
						
					end

					self.object:get_car():SetfHealth(health)

				else
					health = 1
					self.object:get_car():SetfHealth(health)
				end
			
				self.health=health
				self:hit_callback(self.object, self.health-health, vector():set(1,0,0), db.actor, 0)
				self.nofixonhit=nil
			end
		  end
		end
	elseif self.object:section() == "m_car" then
		if not db.actor.inside_car and self.object:get_car():engaged() then
			db.actor.inside_car = self.object:id()
		elseif db.actor.inside_car == self.object:id() and not self.object:get_car():engaged() then
			db.actor.inside_car = nil
		end
	end
end

function generic_physics_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	if self.object:clsid() == clsid.projector then
		db.add_sl(self.object)
	end

	if string.find(self.object:section(), "vehicle_btr") then
		db.add_btr(self.object)
	end

	if self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true then
		self.box_items = xr_box.ph_item_box(self.object)
	end

	amk.on_net_spawn(self.object)

	-- прозрачные рюкзаки
	transparent_treasure.net_spawn(self.object)

	return true
end

function generic_physics_binder:net_destroy()
	local st = db.storage[self.object:id()]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

	db.del_sl(self.object)
	db.storage[self.object:id()] = nil

	if string.find(self.object:section(), "vehicle_btr") then
		db.del_btr(self.object)
	end

	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.use_object, nil)
	
	object_binder.net_destroy(self)
end

function generic_physics_binder:net_save_relevant()
	--printf("generic_physics_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_physics_binder:save(packet)
	--printf("generic_physics_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function generic_physics_binder:load(reader)
	self.loaded = true

	--printf("generic_physics_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end

function generic_physics_binder:use_callback(obj, who)
	--xr_use.notify_on_use(obj, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end

	if self.object:clsid() == clsid.inventory_box then
		hotkeys.on_use(obj, who)
	end

	fly.returner_clear_pos()
	amk.on_use(obj, who)
end

function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	printf("_bp: generic_physics_binder:hit_callback: obj='%s'", obj:name())

	self.nofixonhit=true
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	
end

function generic_physics_binder:death_callback(victim, who)
	printf("_bp: generic_physics_binder:death_callback: obj='%s'", victim:name())
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

    if self.disable_graph_point ~= nil then
        graph:accessible(self.disable_graph_point, true)
        printf("GRAPH POINT ENABLED")
    end
	
	if self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true then
		self.box_items:spawn_items()
	end
end

function generic_physics_binder:btr_death_callback()
	if string.find(self.object:section(), "vehicle_btr") then
		--console:execute("load ~~~ btr_death_callback: "..self.object:id()))
		db.del_btr(self.object)
		xr_statistic.addKillCount(self.object)
		
		if self.object:position():distance_to(db.actor:position()) < 10 then
			local h = hit()
			h.draftsman = db.actor
			h.direction = vector_rotate_y(db.actor:direction(), 180) 
			h:bone("bip01_spine")
			h.type = hit.explosion
			h.power = 1000
			h.impulse = 2000
			db.actor:hit(h)
		end
	end
end

-- Усиление БТР против всего, кроме рпг и РГ6 на время квеста по Сидору
function weapon_against_btr(wpn)
	return wpn:section() == "wpn_rpg7"
		or
		(has_info("sidor_delo_start") and 
		not has_info("sidor_delo_have") and
		not has_info("sidor_delo_fail") and
		level.name() == "l01_escape" and
		wpn:section() == "wpn_rg-6")
end

-- Оружие, против которого у бтр иммунитет
function weapon_immunity_btr(wpn)
	local wpns = {
		["wpn_kuvalda"] = true,
		["wpn_topor"] = true,
		["wpn_crowbar"] = true,
		["wpn_machete"] = true,
		["wpn_kukri"] = true,
	}
	return wpns[wpn:section()]
end
