-- Биндер level_changer

local spots = {
	"level_changer",
	"level_changer1",
	"level_changer2",
	"level_changer3",
	"level_changer4",
}

function bind(obj)
	obj:bind_object(lc_binder(obj))
end

---------------------------------------------------------------------------------------------
-- Порядок загрузки:
-- reload
-- reinit
-- load
-- net_spawn
---------------------------------------------------------------------------------------------
class "lc_binder" (object_binder)

function lc_binder:__init(obj) super(obj)
end 

function lc_binder:update(delta)
	object_binder.update(self, delta)

	if self.object:position():distance_to(db.actor:position()) < 5 then
		if not self.sms_sent then
			self.sms_sent = true
			
			if self:has_map_spot() then
				local lc = netpacket:get(server_object(self.object:id()))
				db.actor:give_game_news("%c[255,160,160,160]"..game.translate_string("st_tip").."\\n".."%c[default]Переход "..game.translate_string(level.name()).." - "..game.translate_string(ai:level_name(graph:vertex(lc.dest_game_vertex_id):level_id()))..".","ui\\ui_iconsTotal", Frect():set(913,752,83,47), 0, 5000)
			end
		end
		
	elseif self.sms_sent then
		self.sms_sent = nil
	end
end

function lc_binder:has_map_spot()
	for i, spot in pairs(spots) do
		--console:execute("load ~~~ spot: "..tostring(level.map_has_object_spot(self.object:id(), spot)))
		if level.map_has_object_spot(self.object:id(), spot) ~= 0 then
			return true
		end
	end
	return false
end
