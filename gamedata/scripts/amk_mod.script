-- Разное от АМК
local nrg,med,cnt,w
local in_hide = false
local sound_obj_right, sound_obj_left, snd_volume, snd_obj_eq
local sync_done = false
local dynlasthour

local weather_types = {
	l01_escape = 1,
	l02_garbage = 1,
	l03_agroprom = 1,
	l03u_agr_underground = 1,
	l04_darkvalley = 1,
	l04u_labx18 = 1,
	l05_bar = 1,
	l06_rostok = 1,
	l07_military = 1,
	l08_yantar = 1,
	l08u_brainlab = 1,
	l10_radar = 1,
	l10u_bunker = 1,
	l11_pripyat = 1,
	l12_stancia = 1,
	l12_stancia_2 = 1,
	l12u_control_monolith = 1,
	l12u_sarcofag = 1
}

-- Квест Ночная Звезда
function spawn_star(actor,npc,p1,p2)
	local points = {
		{position={x=-24.2727108001709,y=-12.1660995483398,z=-100.200202941895},gv=0,lv=73868},
		{position={x=159.56,y=4.72,z=88.60},gv=155,lv=463808},
		{position={x=-4.11,y=2.90,z=108.09},gv=85,lv=272619}
	}
    local a = points[math.random(#points)]
    local obj = create("amk_af_night_star", xyz(a.position.x,a.position.y,a.position.z), a.lv, a.gv)

	local m_where = news_main.get_point_description("l01_escape", vector():set(a.position.x,a.position.y,a.position.z))
	db.actor:give_talk_message(m_where.." скорее всего поискать стоит. Где-то там он, точно говорю.", "ui\\ui_iconstotal", Frect():set(0,0,10,10), "simple_answer_item")
end

-- Эта функция вызывается первой. Онлайновые объекты недоступны. db.actor недоступен.
function on_game_start()
	math.randomseed(screen:time_global())
end

function first_run() 
	if not has_info("x_first_run") then
		amk.spawn_item("amk_zapiska",xyz(-126.96,-28.41,-379.12),27,125181)
		amk.spawn_item("amk_zapiska",xyz(21.6,-3.94,-18.28),1140,5991)
		create("amk_zapiska",xyz(124.86881256104,31.754182815552,-13.352614402771),7186,1543)
		sak.add_new_lcitem()
		amk_anoms.pre_blow_off()
		
		spawn_military_btr()	
		spawn_fuel()
		akill.release_targets()
		
		for i=1,2 do
			cycle_task.create_tm_pda(i)
		end
		
		for i=1,4 do
			id_cleaner.create_id_cleaner_pda(i)
		end
		_G.ID_Cleaner:on_new_game()
		
		give_info("x_first_run")
	end

	-- фикс пропадания таймеров (гг не хочет спать)
	if not amk.has_g_timer("gg_need_sleep") then
		amk.g_start_timer("gg_need_sleep",0,0,6)
	end
	if not amk.has_g_timer("show_news") then
		amk.g_start_timer("show_news",0,0,10)
	end
end

function check_spawn()
	amk_anoms.init()
	spawn_unspawned_respawners() 
	news_main.init()
	amk_offline_alife.init()

	if not has_info("val_chase_start") then
		local objt = story_object(6002)
		if objt then
			release(objt)
		end
	end
	
	sak.out_new_lc(9100,"info_way100a")
	sak.out_new_lc(9101,"info_way101a")
	sak.out_new_lc(9102,"info_way102a")
	sak.out_new_lc(9103,"info_way103a")
	sak.out_new_lc(9104,"info_way104a")
	sak.out_new_lc(9105,"info_way105a")
	sak.out_new_lc(9106,"info_way106a")
	sak.out_new_lc(9107,"info_way107a")
	sak.out_new_lc(9108,"info_way108a")
	sak.out_new_lc(9109,"info_way109a")
	sak.out_new_lc(9110,"info_way110a")
	sak.out_new_lc(9111,"info_way111a")
	sak.out_new_lc(1008,"info_way112a")
	sak.out_new_lc(592,"info_way113a")
	sak.out_new_lc(97101,"info_way114a")
	sak.out_new_lc(11504,"info_way_arhara_peshera_cvalka")
	sak.out_new_lc(11505,"info_way_arhara_peshera_agro")
	sak.out_new_lc(11502,"info_way_arhara_cvalka_peshera")
	sak.out_new_lc(11503,"info_way_arhara_agro_peshera")
	sak.out_new_lc(97071,"info_way_arhara_td_les")
	sak.out_new_lc(97081,"info_way_arhara_labirint_peshera")
	sak.out_new_lc(97021,"info_way_arhara_peshera_labirint")
	sak.out_new_lc(11512,"info_way_arhara_labirint_yantar")
	sak.out_new_lc(11515,"info_way_arhara_yantar_labirint")
	sak.out_new_lc(11511,"info_way_arhara_labirint_earth")
	sak.out_new_lc(97041,"info_way_arhara_atp_pripyat")
	sak.out_new_lc(97091,"info_way_arhara_atp_military")
	sak.out_new_lc(97092,"info_way_arhara_atp_kordon")
	sak.out_new_lc(97093,"info_way_arhara_atp_svalka")
	sak.out_new_lc(97100,"info_way_arhara_pripyt_village") 
	sak.out_new_lc(11514,"info_way_arhara_military_earth")
	sak.out_new_lc(11513,"info_way_arhara_td_earth")
	sak.out_new_lc(12506,"info_way_arhara_svalka_earth")
	sak.out_new_lc(11510,"info_way_arhara_earth_labirint")
	sak.out_new_lc(97094,"info_way_arhara_radar_warlab")
	sak.out_new_lc(97095,"info_way_arhara_warlab_brainlab")
	sak.out_new_lc(97097,"info_way_arhara_warlab_skladu")
	sak.out_new_lc(97098,"info_way_arhara_x18_warlab")
	sak.out_new_lc(14002,"info_way_arhara_kordon_boloto")
	sak.out_new_lc(14091,"info_way_arhara_radar_forest")
	sak.out_new_lc(97099,"info_way_arhara_chaes2_atp")
	sak.out_new_lc(11529,"info_way_arhara_village_limansk")
	sak.out_new_lc(11531,"info_way_arhara_village_hospital")
	sak.out_new_lc(97103,"info_way_arhara_chaes_generator")
	sak.out_new_lc(97104,"info_way_arhara_hospital_agroprom")
	sak.out_new_lc(97105,"info_way_arhara_agroprom_marsh1")
	sak.out_new_lc(97001,"info_way_arhara_bar_atp")
	sak.out_new_lc(97106,"info_way_arhara_gener_pripyat")
	sak.out_new_lc(97102,"info_way_arhara_chaes2_chaes")
	sak.out_new_lc(11521,"info_way_arhara_gener_hospital")
	sak.out_new_lc(97096,"info_way_arhara_warlab_generators")
	sak.out_new_lc(97107,"info_way_arhara_limansk_generators")
	sak.out_new_lc(97108,"info_way_arhara_forest_warlab")
	sak.out_new_lc(97109,"info_way_arhara_dcity_limansk")
	sak.out_new_lc(97110,"info_way_arhara_dead_city_atp")
	sak.out_new_lc(97111,"info_way_arhara_dcity_rostok")
	sak.out_new_lc(97112,"info_way_arhara_atp_dead_city")
	sak.out_new_lc(97113,"info_way_arhara_dcity_zaton")
	sak.out_new_lc(97114,"info_way_arhara_lima_dcity")

	--level_changers section
	local lname = level.name()
	local sname = amk.load_variable("level_on_save","")

	amk_offline_alife.update_npc_tables()
	
	-- іададим сооб ения при переходе на уровень.
	if (lname ~= sname and sname ~= "") then
		local b1 = news_main.isIsolatedLevel(lname)
		local b2 = news_main.isIsolatedLevel(sname)
		if b1 and not b2 then -- Tпустились под землі.
			news_main.on_disconnect()
		elseif b2 and not b1 then -- Tvбрались из-под земли.
			news_main.on_connect()
		end
		amk_offline_alife.update_trade()
		u3_utils.copy_autosave(sname, lname)
	end

	if lname=="l01_escape" and sname=="l04_darkvalley" then
		local obj = story_object(6002)
		if not obj then
			create(ai:spawn_id(6002))
		end
	end
  
	if sname=="l01_escape" and lname=="l04_darkvalley" then
		db.actor:set_actor_position(xyz(-44.38, 0.43, -541.47))
	end
  
	if weather_types[lname]==0 then
		w=amk.load_variable("dynweather",nil) or level.get_weather() 
	else
		w=level.get_weather() 
	end
	if amk.load_variable("blowout",0)>0 then amk.save_variable("weather",level.get_weather()) end
	level.set_weather("amk_for_blow",true)
	game.start_tutorial("restore_sun")

	if amk.load_variable("blowout",0)>0 and amk.load_variable("blowout",0)<4 then
		local bt=blowout_type()
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		if bt<1 then
			level.set_weather("amk_for_blow",true)
			level.add_pp_effector("vibros.ppe", 2001, true)
			blowout_psy_sound("start")
		end
	end

	if db.actor and not has_info("game_over") then
		local flame = db.actor:object("wpn_flame")
		if flame then
			db.actor:iterate_inventory(
				function(dummy,item)
					if item:section()=="wpn_flame" then
						release(server_object(item:id()))
					end
				end
				,db.actor)
		end
	end
end

function restore_sun()
	amk.save_variable("level_on_save", level.name())
	if amk.load_variable("blowout",0) == 0 then
		level.set_weather(w,true)
	end
	if amk.load_variable("blow_started", 0) == 0 then
		start_blow_timer() amk.save_variable("blow_started", 1)
	end

	-- Tид ++ после смерти в его собственной броне
	local npc_SP = db.actor
	local outfit = npc_SP:item_in_slot(6)
	if outfit ~= nil then
		local outfit_name = outfit:section()
		local outfit_cond = outfit:condition()
		release(server_object(outfit:id()), true)
		outfit = create(outfit_name, npc_SP:position(), npc_SP:level_vertex_id(), npc_SP:game_vertex_id(), npc_SP:id())
		if outfit ~= nil then
			amk.start_timer("outfit_cond", 1, {outfit.id, math.min(math.ceil(outfit_cond * 100), 100)})
		end
	end
end

-- Динамические новости  
function show_news()
	news_main.on_news()

	if not sleep_manager.is_sleep_active() then
		-- вероятности поставлены по примерному количеству СМС в каждом файле
		if math.random() > 0.91 then
			if math.random() > 0.40 then
				local dolg_news = amk_dolg.get_strings()
				db.actor:give_game_news(dolg_news, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, news_len(dolg_news)*1000)
				say([[device\pda\pda_tip]])
			else
				local freedom_news = amk_freedom.get_strings()
				db.actor:give_game_news(freedom_news, "ui\\ui_iconsTotal", Frect():set(498,94,83,47), 0, news_len(freedom_news)*1000)
				say([[device\pda\pda_tip]])
			end
		else
			if math.random() > 0.52 then    
				local uniq = amk_uniq_news_lists.get_strings()
				local name,sname = amk_names_lists.get_strings()
				amk.send_tip(uniq,name.." "..sname,nil,news_len(uniq),"uniq")
			else
				local mod_news = amk_modders.get_strings()
				
				-- попробуем подобрать иконку
				local x,y, pos
				pos = string.find(mod_news,"[default]",1,true)
				if pos then
					x,y = news_manager.get_sender_icon(string.sub(mod_news,1,pos-5)..":")
				else
					x,y = 498,47
				end
				
				db.actor:give_game_news(mod_news, "ui\\ui_iconsTotal", Frect():set(x,y,83,47), 0, news_len(mod_news)*1000)
				say([[device\pda\pda_tip]])
			end
		end
	end
	amk.g_start_timer("show_news",0,0,math.random(50,70))
end

function news_len(news)
	local length = string.len(news)/12
	if length > 45 then
		length = 45
	end
	return length
end

-- Сон
function reduce_need_sleep(time)
	local tmp = amk.load_variable("gg_need_sleep",0)
	tmp = tmp-time*120
	if tmp < 0 then
		tmp = 0
	end
	
	amk.save_variable("gg_need_sleep_nrg",0)
	amk.save_variable("block_sleep_menu",0)
	amk.save_variable("gg_need_sleep",tmp)
	test_sleep_pp()
end

function test_for_need_sleep()
	if sleep_manager.is_sleep_active() == false then 
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)+1) 
		test_sleep_pp()
	end
	amk.g_start_timer("gg_need_sleep",0,0,6)
end

function test_sleep_pp()
	local tmp = amk.load_variable("gg_need_sleep",0)
	if tmp > 360 then
		sleep_manager.main(5+amk.load_variable("gg_need_sleep_nrg",0))
	end
	if tmp > 300 then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, 5.0)  
	end
	if tmp <= 300 then
		level.remove_pp_effector(999)
	end
end

function check_sleep_item(obj)
	local section = obj:section()
	
	if section == "energy_drink" then
		test_for_need_sleep_nrg()
	elseif section == "matras" then
		test_for_need_sleep_matras()
	elseif section == "treasure_item" then  
		if has_info("peshera_go") then
			local sobj=create("rukzak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
			kostya_dialog.peshera_go_pre(sobj:section_name(),sobj.id)
		else
			safe_StealManager.GetStealManagerClass():SpawnStorage() --спавним по позиции актора
		end
	end
end

function test_for_need_sleep_nrg()
	local n = amk.load_variable("gg_need_sleep_nrg",0)
	if n < 3 then
		amk.save_variable("gg_need_sleep_nrg",n+1)
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)-30+n*10) 
		test_sleep_pp()
	end  
	amk.g_start_timer("block_sleep_menu",0,1,0)
	amk.save_variable("block_sleep_menu",1)
end

function test_for_need_sleep_matras()
	local enemy = false
	local obj
	local level_object_by_id = level_object
	local actor = db.actor
	local actorPos = actor:position()
	for npcId, npc in pairs(db.storage) do
		obj = level_object_by_id(npcId)
		if obj then
			if (( IAmAStalker[obj:clsid()] and amk.get_npc_relation(obj,actor)=="enemy" ) or IAmAMonster[obj:clsid()]) and obj:alive()
				and obj:position():distance_to(actorPos) < 40 and obj:see(actor) then
				enemy = true
				break
			end
		end
	end
	if enemy == true then
		amk.send_tip(game.translate_string("not_need_sleep_enemy"),nil,nil,5)
	elseif controller_near() then
		amk.send_tip(game.translate_string("not_need_sleep_controller"),nil,nil,5)
	elseif (has_info("angar_kulinar") and not has_info("angar_kulinar_have")) or (has_info("hamster_kuznec2_spawn") and not has_info("hamster_kuznec2_have")) or (has_info("volna_sak_battle") and not has_info("volna_sak_have")) then
			amk.send_tip(game.translate_string("not_need_sleep_ambush"),nil,nil,5)
	else
		if amk.load_variable("blowout",-1) > -1 and amk.load_variable("blowout",-1) < 5 then
			amk.send_tip(game.translate_string("blowout_not_sleep"),nil,nil,5)
		else
			if has_info("horror_time_begin") and dont_has_info("horror_fail") then
				amk.send_tip(game.translate_string("not_need_sleep_in_hell"),nil,nil,5)
			else
				if amk.load_variable("block_sleep_menu",0) == 0 then
					if amk.load_variable("gg_need_sleep",0) > 0 or
						(has_info("snp_shadows_start") and not has_info("snp_shadows_done")) or
						db.debug_mode
					then
						say("zwuk\\inv_sleeping")
						local spwn = ui_cheat.cheat(hud)
						level.start_stop_menu(spwn,true)
					else
						amk.send_tip(game.translate_string("not_need_sleep"),nil,nil,5)
					end
				else
					amk.send_tip(game.translate_string("not_need_sleep_nrg"),nil,nil,5)
				end
			end
		end
	 end
	amk.spawn_item_in_inv("matras")
end

function controller_near()
	for id,obj in pairs(db.creatures) do
		if obj and obj:clsid() == clsid.controller_s and obj:alive() and db.actor:position():distance_to(obj:position()) < 100 then
			return true
		end
	end
	return false
end

-- Фикс Радара
function check_radar_off()
	if (level.name() == "l10_radar") then
		if not has_info("bar_deactivate_radar_done") then
			local pos = db.actor:position()
			if pos.z > 65 and pos.x > 350 and pos.x < 410 then
				if amk.load_variable("radar_fix",0) == 0 then
					level.add_pp_effector("fire_hit.ppe", 1523, true)
					level.set_pp_effector_factor(1523, 0.5)
					amk.save_variable("radar_fix",1)
					amk.start_timer("radar_fix",5)
				end
			end
		end
	end
end

function radar_fix()
	level.remove_pp_effector(1523)
	local pos = db.actor:position()
	if pos.z > 65 and pos.x > 350 and pos.x < 410 then
		db.actor:kill(db.actor)
	end
	amk.del_variable("radar_fix")
end

-- Преобразование предметов
local tramsform_items = {
	["item1"] = {info = "info_portion_1", result = {"item_out_1", "item_out_2", "item_out_3", "item_out_4"}},
	["item2"] = {info = "info_portion_2", result = {"item_out_2"}},
	["kaktus_izomorf"] = {info = "kaktus_izo_resept", result = {"bloodsucker_effector", "af_spirit_4", "af_arhara_globus", "mutant_krovosos_cocoon"}},
	["izom_globus"] = {info = "kaktus_izo_resept", result = {"bomba_mina_n", "af_babka_3", "af_spirit_4", "device_teleport"}},
	["psevdokristall"] = {info = "kaktus_izo_resept", result = {"af_spirit_3", "af_babka_2", "wpn_m4", "device_teleport"}},
	["izomorf_plastilin"] = {info = "molniya_plastilin_ok_start", result = {"korobka_sigars", "ammo_5.45x39_izomorf", "ammo_7.62x54_izomorf", "ammo_zhekan_izomorf"}},
     ["korobka_sigars"] = {info = "kluch_poluchen", result = {"9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf"}}
}

-- проверка на упавший предмет/артефакт
function check_for_item_drop(obj)
	local obj_sect = obj:section()
	local actor = db.actor
	
	if tramsform_items[obj_sect] and actor:has_info(tramsform_items[obj_sect].info) then
		local lv = obj:level_vertex_id()
		local gv = obj:game_vertex_id()
		if gv == 65535 then gv = actor:game_vertex_id() end
		if gv == 65535 then return end -- похоже, что рядом нету вертекса
		
		-- предмет подходит - отправляем его на экспертизу
		-- узнаем не съели ли его или вvложили в нvчку
		local tbl	= {}
		tbl.obj_id	= obj:id()
		tbl.lv		= lv
		tbl.gv		= gv
		amk.start_timer("timer_drop_obj_transform", 0.2, tbl)
	end
end

function item_transform(obj_id, lv, gv)
    local obj = level_object(obj_id)
    if obj then
        level.add_pp_effector("teleport.ppe", 1524, false)
        local result = tramsform_items[obj:section()].result
        local position = obj:position()
        for i = 1, #result do
            amk.spawn_item(result[i], position, gv, lv)
        end
        amk.remove_item(obj)
    end
end

-- Преобразование артефактов
local cur_level=nil
local havegoodart=false

-- Список компонентов, желательно добавлять в алфавитном порядке
local afs={
["af_ameba_mica"] = true,
["af_ameba_slime"] = true,
["af_ameba_slug"] = true,
["af_armor_1"] = true,
["af_armor_2"] = true,
["af_armor_3"] = true,
["af_babka_1"] = true,
["af_babka_2"] = true,
["af_babka_3"] = true,
["af_blood"] = true,
["af_buliz"] = true,
["af_cristall"] = true,
["af_cristall_flower"] = true,
["af_cry_1"] = true,
["af_cry_2"] = true,
["af_dik_1"] = true,
["af_dik_2"] = true,
["af_dik_3"] = true,
["af_drops"] = true,
["af_dummy_battery"] = true,
["af_dummy_battery_red"] = true,
["af_dummy_dummy"] = true,
["af_dummy_glassbeads"] = true,
["af_dummy_pellicle"] = true,
["af_dummy_pellicle_red"] = true,
["af_dummy_spring"] = true,
["af_dummy_spring_red"] = true,
["af_electra_flash"] = true,
["af_electra_moonlight"] = true,
["af_electra_sparkler"] = true,
["af_fireball"] = true,
["af_fuzz_kolobok"] = true,
["af_gold_fish"] = true,
["af_gravi"] = true,
["af_kamen_udachy"] = true,
["af_kol_1"] = true,
["af_kol_2"] = true,
["af_kol_3"] = true,
["af_life_heart"] = true,
["af_medusa"] = true,
["af_mincer_meat"] = true,
["af_night_star"] = true,
["af_part_monolit2"] = true,
["af_power"] = true,
["af_power_1"] = true,
["af_power_2"] = true,
["af_pudd_1"] = true,
["af_pudd_2"] = true,
["af_pudd_3"] = true,
["af_rusty_kristall"] = true,
["af_rusty_sea-urchin"] = true,
["af_rusty_thorn"] = true,
["af_simbion"] = true,
["af_soul"] = true,
["af_spirit_1"] = true,
["af_spirit_2"] = true,
["af_spirit_3"] = true,
["af_vyvert"] = true,
["af_black_angel"]=true,
["af_arhara_globus"]=true,
["bandage"] = true,
["bezoar"] = true,
["bread"] = true,
["conserva"] = true,
["energy_drink"] = true,
["izomorf_kompas"] = true,
["kolba_pustay"] = true,
["kolba_siniy_poln"] = true,
["kolba_orand_poln"] = true,
["kolba_krasn_poln"]=true,
["kolbasa"] = true,
["part_boar_leg"] = true,
["part_burer_red_hand"] = true,
["part_chimera_kogot"] = true,
["part_deathclaw_antler"] = true,
["part_dog_tail"] = true,
["part_face_tushkano"] = true,
["part_flesh_eye"] = true,
["part_fracture_hand"] = true,
["part_krovosos_jaw"] = true,
["part_krovosos_red_jaw"] = true,
["part_psevdodog_tail"] = true,
["part_psevdogigant_hand"] = true,
["part_snork_leg"] = true,
["part_spleen_rat"] = true,
["part_tail_cat"] = true,
["part_zombie_hand"] = true,
["part_zombie_teeth"] = true,
["part_digitis_biblio"] = true,
["part_tarakan"] = true,
["part_tarakan_strong"] = true,
["red_mozg"] = true,
["part_rudiment_big"] = true,
["snp_prime_maz"] = true,
["sweetness"] = true,
["vodka"] = true,
-- все эмбрионы нужные для варки
["mutant_boar_cocoon"] = true,
["mutant_burer_cocoon"] = true,
["mutant_cat_cocoon"] = true,
["mutant_chimera_cocoon"] = true,
["mutant_flesh_cocoon"] = true,
["mutant_gigant_cocoon"] = true,
["mutant_krovosos_cocoon"] = true,
["mutant_poltergeist_cocoon"] = true,
["mutant_psevdodog_cocoon"] = true,
["mutant_psydog_cocoon"] = true,
["mutant_snork_cocoon"] = true,
["mutant_zombie_cocoon"] = true,
-- emb
["mutant_rat_cocoon"] = true,
["mutant_tarakan_cocoon"] = true,
["mutant_tarakan2_cocoon"] = true,
["mutant_bloodsucker_cocoon"] = true,
["mutant_bloodsucker2_cocoon"] = true,
["mutant_deathclaw_cocoon"] = true,
["mutant_fracture_cocoon"] = true,
["mutant_bibliotekar_cocoon"] = true,
["mutant_mono_cocoon"] = true,
["mutant_babka_cocoon"] = true,
["mutant_ghost_cocoon"] = true,
["mutant_kachok_cocoon"] = true,
["mutant_big_cocoon"] = true,
["mutant_jumper_cocoon"] = true,
["mutant_electro_cocoon"] = true,
["mutant_x_ray_cocoon"] = true
}

-- проверка на упавший предмет/артефакт
function check_for_af_drop(obj)
	local obj_sect = obj:section()
	
	-- проверка не один ли это из компонентов
	if afs[obj_sect] == true then
		local anom_id,anom_pos,anom_radius,dist = amk_anoms.get_nearest_anomaly(obj)
		
		if anom_id and anom_radius - dist > -2 then
			local lv = level_object(anom_id):level_vertex_id()
			local gv = level_object(anom_id):game_vertex_id()
			if gv == 65535 then gv = obj:game_vertex_id() end
			if gv == 65535 then gv = db.actor:game_vertex_id() end
			if gv == 65535 then return end -- похоже, что рядом нету вертекса
			
			-- предмет подходит - отправляем его на экспертизу
			-- узнаем не съели ли его или вvложили в нvчку
			local tbl		= {}
			tbl.obj_id		= obj:id()
			tbl.anom_id		= anom_id
			tbl.anom_radius	= anom_radius
			tbl.lv			= lv
			tbl.gv			= gv
			amk.start_timer("timer_drop_obj_varka", 0.2, tbl)
		end
	end
end

-- проверка: является ли компонентом для варки
-- параметр - название секции
function is_komponent(sec)
     return (afs[sec] ~= nil)
end

-- аномалия "узнаётся" по части названия!
-- komp - компонентv
-- удача v_udachi + вvрождение в булvжник v_virogd <= 100 !!!
-- отторжение v_ottorg = 100 - (v_udachi + v_virogd) посему и не нужно прописvвать в таблицу
-- cel - цель (может бvть одновременно несколько целей)
-- info - инфопорция, которая будет вvдана после L-L+=+Ј варки
-- virogd - во что вvрождается (может бvть одновременно несколько вvрождений)
-- vremya = {дни, часы, минуты} - время варки/мутации
-- remove_anomaly - удалить ли аномалию (можно комбинировать вместе с варкой/мутацией)
-- not_for_mutator - рецепт никогда не попадёт в трансмутатор
local anom_recept_komp = {
	-- умолчание, если нет даннvх ближе к рецепту
	default = {
		cel = {},
		v_udachi = 80,
		v_virogd = 20,
		virogd = {["af_buliz"]=true},
		vremya = {0,0,5},
		remove_anomaly = false
	},
	
	anomalii = {
		["_zharka"] = {
			-- умолчание, если нет даннvх ближе к рецепту,
			-- которое может переопределятья в рецепте
			name = "\"Жарка\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["starik_zadanie_vzyt_done"] = {
					komp = {["mutant_boar_cocoon"]=true,["mutant_flesh_cocoon"]=true,["mutant_psevdodog_cocoon"]=true,["part_boar_leg"]=true},
					cel = {["mutant_kachok_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["voron_new_kvest_done"] = {
					komp = {["mutant_krovosos_cocoon"]=true,["mutant_burer_cocoon"]=true,["mutant_bloodsucker_cocoon"]=true,["part_deathclaw_antler"]=true},
					cel = {["mutant_bloodsucker2_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_electra_flash_zharka"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_vyvert"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_ameba_slime_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["kolbasa"]=true,["part_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_gravi_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_gravi"]=true}
				},
				["info_artmod_night_star_zharka"] = {
					komp = {["af_rusty_kristall"]=true,["af_vyvert"]=true,["af_electra_flash"]=true,["part_snork_leg"]=true},
					cel = {["af_night_star"]=true}
				},
				["info_artmod_electra_moonlight_zharka"] = {
					komp = {["af_gravi"]=true,["af_medusa"]=true,["af_electra_flash"]=true,["part_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_dummy_battery_zharka"] = {
					komp = {["af_electra_flash"]=true,["af_ameba_mica"]=true,["vodka"]=true,["part_dog_tail"]=true},
					cel = {["af_dummy_battery"]=true}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_drops"] = {
					komp = {["af_soul"]=true},
					cel = {["af_spirit_1"]=true},
					vremya = {0,4,0}
				},
				["info_artmod_gusenica"] = {
					komp = {["bezoar"]=true},
					cel = {["af_caterpillar"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_probabka_burera"] = {
					komp = {["af_babka_3"]=true},
					cel = {["af_babka_4"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_soul_fire"] = {
					komp = {["af_spirit_1"]=true},
					cel = {["af_spirit_2"]=true},
					vremya = {0,6,0}
				},
				["info_amk_recipt_soul_cristal"] = {
					komp = {["af_spirit_2"]=true},
					cel = {["af_spirit_3"]=true},
					vremya = {0,7,0}
				},
				["info_amk_recipt_tears_fire"] = {
					komp = {["af_cry_1"]=true},
					cel = {["af_cry_2"]=true},
					vremya = {0,6,0}
				},
				["info_amk_recipt_dikoobraz"] = {
					komp = {["af_rusty_sea-urchin"]=true},
					cel = {["af_dik_1"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_giant_small_brother"] = {
					komp = {["af_kol_3"]=true},
					cel = {["af_kol_4"]=true},
					vremya = {0,3,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_controller_skalp"] = {
					komp = {["af_armor_3"]=true},
					cel = {["af_armor_4"]=true},
					vremya = {0,6,0},
					v_udachi = 100,
					v_virogd = 0
				}
			}
		},
		
		["_galant"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Электра\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_battery"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true
				},
				["mil_trader_teleport_07_done"] = {
					komp = {["mutant_cat_cocoon"]=true,["part_chimera_kogot"]=true,["mutant_jumper_cocoon"]=true,["mutant_psydog_cocoon"]=true},
					cel = {["mutant_electro_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["embt_vp1_done"] = {
					komp = {["mutant_deathclaw_cocoon"]=true,["mutant_bibliotekar_cocoon"]=true,["red_mozg"]=true,["af_life_heart"]=true},
					cel = {["mutant_mono_cocoon"]=true},
					vremya = {0,1,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_fireball_galant"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["vodka"]=true,["part_dog_tail"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_cristall_flower_galant"] = {
					komp = {["af_vyvert"]=true,["af_rusty_thorn"]=true,["conserva"]=true,["part_dog_tail"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_ameba_mica_galant"] = {
					komp = {["af_ameba_slime"]=true,["af_rusty_thorn"]=true,["af_medusa"]=true,["kolbasa"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_electra_moonlight_galant"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_fireball"]=true,["part_psevdodog_tail"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_gold_fish_galant"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_cristall_flower"]=true,["part_flesh_eye"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_dummy_spring_galant"] = {
					komp = {["af_cristall_flower"]=true,["af_cristall"]=true,["part_psevdodog_tail"]=true,["conserva"]=true},
					cel = {["af_dummy_spring"]=true}
				},
				["info_artmod_medusa_galant"] = {
					komp = {["part_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["part_dog_tail"]=true},
					cel = {["af_medusa"]=true}
				},
				["info_amk_recipt_soul_bengal"] = {
					komp = {["af_spirit_3"]=true},
					cel = {["af_spirit_4"]=true},
					vremya = {0,1,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_tears_electra"] = {
					komp = {["af_drops"]=true},
					cel = {["af_cry_1"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_grandmother_glassbeards"] = {
					komp = {["af_dummy_glassbeads"]=true},
					cel = {["af_babka_1"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_dummy_fire"] = {
					komp = {["af_dummy_dummy"]=true},
					cel = {["af_pudd_1"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_dummy_bright"] = {
					komp = {["af_pudd_1"]=true},
					cel = {["af_pudd_2"]=true},
					vremya = {0,6,0}
				},
				["info_amk_recipt_dummy_moon"] = {
					komp = {["af_pudd_2"]=true},
					cel = {["af_pudd_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_electra_dikoobraz"] = {
					komp = {["af_dik_1"]=true},
					cel = {["af_dik_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_buzz"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Холодец\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["hand_otdan"] = {
					komp = {["mutant_zombie_cocoon"]=true,["bezoar"]=true,["part_rudiment_big"]=true,["part_zombie_hand"]=true},
					cel = {["mutant_babka_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["test_quest_art_otdan"] = {
					komp = {["mutant_rat_cocoon"]=true,["part_tarakan_strong"]=true,["sweetness"]=true,["conserva"]=true},
					cel = {["mutant_tarakan_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_rusty_kristall_buzz"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["af_drops"]=true,["bread"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_rusty_thorn_buzz"] = {
					komp = {["af_blood"]=true,["bandage"]=true,["bread"]=true,["part_dog_tail"]=true},
					cel = {["af_rusty_thorn"]=true}
				},
				["info_artmod_fireball_buzz"] = {
					komp = {["af_rusty_thorn"]=true,["af_vyvert"]=true,["part_snork_leg"]=true,["bread"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_night_star_buzz"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_electra_flash"]=true,["part_psevdodog_tail"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_fuzz_kolobok_buzz"] = {
					komp = {["af_night_star"]=true,["af_soul"]=true,["af_electra_moonlight"]=true,["af_rusty_sea-urchin"]=true},
					cel = {["af_fuzz_kolobok"]=true}
				},
				["info_artmod_vyvert_buzz"] = {
					komp = {["part_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["part_dog_tail"]=true},
					cel = {["af_vyvert"]=true}
				},
				["info_amk_recipt_tears_chimaera"] = {
					komp = {["af_cry_2"]=true},
					cel = {["af_cry_3"]=true},
					vremya = {0,2,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_pra_grandmother_glassbeards"] = {
					komp = {["af_babka_1"]=true},
					cel = {["af_babka_2"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_dummy_puding"] = {
					komp = {["af_pudd_3"]=true},
					cel = {["af_pudd_4"]=true},
					vremya = {0,7,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_sopl_dikoobraz"] = {
					komp = {["af_dik_2"]=true},
					cel = {["af_dik_3"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_almaz_kolobok"] = {
					komp = {["af_kol_2"]=true},
					cel = {["af_kol_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_pancir"] = {
					komp = {["af_armor_2"]=true},
					cel = {["af_armor_3"]=true},
					vremya = {0,2,0}
				},
				["info_artmod_globus"] = {
					komp = {["af_simbion"]=true},
					cel = {["af_arhara_globus"]=true},
					vremya = {0,0,10},
					v_udachi = 75,   
					v_virogd = 25
				},
				["info_amk_recipt_simbion"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["af_blood"]=true,["af_rusty_thorn"]=true},
					cel = {["af_simbion"]=true},
					vremya = {0,5,0}
				},
				["izumrud_recept_start"] = {
					komp = {["af_electra_flash"]=true,["af_gold_mincer_meat"]=true,["af_night_star"]=true,["part_boar_leg"]=true},
					cel = {["af_electra_green"]=true},
					vremya = {0,0,2},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true,
					info = "izumrud_recept_have"
				},
				["snp_kalmyk1_done"] = {
					komp = {["snp_prime_maz"]=true},
					cel = {["snp_prime_maz_green"]=true},
					vremya = {0,1,0},
					v_udachi = 100,
					v_virogd = 0
				}
			}
		},
		
		["_fountain"] = {
			name = "\"Фонтан\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},

			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["emb0"] = {
					komp = {["mutant_x_ray_cocoon"]=true},
					cel = {["mutant_wolf_cocoon"]=true},
					vremya = {0,8,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_power_3"] = {
					komp = {["af_power_2"]=true,["af_buliz"]=true,["af_cry_1"]=true,["af_pudd_3"]=true,["af_dik_2"]=true},
					cel = {["af_power_3"]=true},
					vremya = {0,5,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["snp_receipt_parts6_done"] = {
					komp = {["kolba_pustay"]=true,["kolba_siniy_poln"]=true,["kolba_orand_poln"]=true,["part_rudiment_big"]=true,["part_tarakan"]=true,["part_tarakan_strong"]=true},
					cel = {["kolba_krasn_poln"]=true},
					vremya = {0,0,10},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_cristall_buzz"] = {
					komp = {["af_cristall_flower"]=true,["af_medusa"]=true,["af_fireball"]=true,["part_krovosos_jaw"]=true},
					cel = {["af_cristall"]=true}
				}
			}
		},
		
		["_mincer"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Карусель\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_spring"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_spring_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true
				},
				["emb_container_done"] = {
					komp = {["mutant_big_cocoon"]=true},
					cel = {["mutant_jumper_cocoon"]=true},
					vremya = {0,4,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["kalmyak_need_done"] = {
					komp = {["mutant_zombie_cocoon"]=true,["vodka"]=true,["part_fracture_hand"]=true,["part_digitis_biblio"]=true},
					cel = {["mutant_fracture_cocoon"]=true},
					vremya = {0,0,30},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_cristall_flower_mincer"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_drops_mincer"] = {
					komp = {["af_vyvert"]=true,["bandage"]=true,["vodka"]=true,["part_dog_tail"]=true},
					cel = {["af_drops"]=true}
				},
				["info_artmod_rusty_kristall_mincer"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["conserva"]=true,["part_dog_tail"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_electra_moonlight_mincer"] = {
					komp = {["af_fireball"]=true,["af_blood"]=true,["af_ameba_slug"]=true,["part_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_ameba_slug_mincer"] = {
					komp = {["af_electra_flash"]=true,["af_vyvert"]=true,["af_fireball"]=true,["part_psevdodog_tail"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_dummy_glassbeads_mincer"] = {
					komp = {["af_ameba_mica"]=true,["af_rusty_sea-urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_dummy_glassbeads"]=true}
				},
				["info_amk_recipt_burer_grandmother_glassbeards"] = {
					komp = {["af_babka_2"]=true},
					cel = {["af_babka_3"]=true},
					vremya = {0,0,10}
				},
				["info_amk_recipt_titan_kolobok"] = {
					komp = {["af_kol_1"]=true},
					cel = {["af_kol_2"]=true},
					vremya = {0,5,0}
				},
				["we_ne_chmuri"] = {
					komp = {["af_kamen_udachy"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true,
					info = "spawn_hospit_live"
				},
				["mozno_varit"] = {
					komp = {["af_part_monolit2"]=true},
					cel = {["af_kamen_udachy"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true,
					info = "spawn_kamen_udachy"
				},
				["info_artmod_blood_mincer"] = {
					komp = {["kolbasa"]=true,["energy_drink"]=true,["part_spleen_rat"]=true,["part_psevdodog_tail"]=true},
					cel = {["af_blood"]=true}
				},
				["info_amk_recipt_cheshya"] = {
					komp = {["af_armor_1"]=true},
					cel = {["af_armor_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_mosquito_bald"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Трамплин\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_pellicle"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_pellicle_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true
				},
				["emb14"] = {
					komp = {["mutant_gigant_cocoon"]=true,["mutant_snork_cocoon"]=true,["mutant_kachok_cocoon"]=true,["part_psevdogigant_hand"]=true},
					cel = {["mutant_big_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["dar_password_info2"] = {
					komp = {["mutant_tarakan_cocoon"]=true,["part_tarakan"]=true},
					cel = {["mutant_tarakan2_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_mincer_meat_mosquito_bald"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["vodka"]=true,["part_dog_tail"]=true},
					cel = {["af_mincer_meat"]=true}
				},
				["info_artmod_electra_sparkler_mosquito_bald"] = {
					komp = {["af_drops"]=true,["bandage"]=true,["kolbasa"]=true,["part_dog_tail"]=true},
					cel = {["af_electra_sparkler"]=true}
				},
				["info_artmod_ameba_slug_mosquito_bald"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["bandage"]=true,["vodka"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_cristall_mosquito_bald"] = {
					komp = {["af_mincer_meat"]=true,["af_vyvert"]=true,["af_fireball"]=true,["part_flesh_eye"]=true},
					cel = {["af_cristall"]=true}
				},
				["info_artmod_rusty_sea-urchin_mosquito_bald"] = {
					komp = {["af_ameba_slime"]=true,["af_blood"]=true,["af_rusty_kristall"]=true,["part_krovosos_jaw"]=true},
					cel = {["af_rusty_sea-urchin"]=true}
				},
				["info_artmod_dummy_dummy_mosquito_bald"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_mincer_meat"]=true,["af_night_star"]=true},
					cel = {["af_dummy_dummy"]=true}
				},
				["info_amk_recipt_stone_dikoobraz"] = {
					komp = {["af_dik_3"]=true},
					cel = {["af_dik_4"]=true},
					vremya = {0,7,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_steel_kolobok"] = {
					komp = {["af_fuzz_kolobok"]=true},
					cel = {["af_kol_1"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_shkura"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_armor_1"]=true},
					vremya = {0,5,0}
				}
			}
		},
		
		["_gravi_zone"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Воронка\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_red_battery"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					not_for_mutator = true
				},
				["snp_almaz0"] = {
					komp = {["mutant_bloodsucker2_cocoon"]=true},
					cel = {["mutant_deathclaw_cocoon"]=true},
					vremya = {0,3,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["arhara_shaxter_start"] = {
					komp = {["part_tarakan"]=true,["bread"]=true,["part_tail_cat"]=true,["part_spleen_rat"]=true},
					cel = {["mutant_rat_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_power_2"] = {
					komp = {["af_power_1"]=true,["af_buliz"]=true,["af_gravi"]=true,["af_pudd_2"]=true,["af_rusty_thorn"]=true},
					cel = {["af_power_2"]=true},
					vremya = {0,1,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_artmod_ameba_slug_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_medusa"]=true,["kolbasa"]=true,["part_dog_tail"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_ameba_slime_gravi_zone"] = {
					komp = {["af_medusa"]=true,["bandage"]=true,["conserva"]=true,["part_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_electra_flash_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["part_dog_tail"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_night_star_gravi_zone"] = {
					komp = {["af_rusty_thorn"]=true,["af_medusa"]=true,["af_rusty_kristall"]=true,["part_psevdodog_tail"]=true},
					cel = {["af_night_star"]=true}
				},
				["info_artmod_soul_gravi_zone"] = {
					komp = {["af_electra_flash"]=true,["af_cristall_flower"]=true,["af_ameba_slug"]=true,["part_snork_leg"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_dummy_pellicle_gravi_zone"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_gold_fish"]=true,["af_soul"]=true},
					cel = {["af_dummy_pellicle"]=true}
				}
			}
		},
		
		["_ice"] = {
			-- умолчание, если нет даннvх ближе к рецепту
			name = "\"Снежная\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},
			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["emb_kill_tm_done"] = {
					komp = {["mutant_babka_cocoon"]=true},
					cel = {["mutant_ghost_cocoon"]=true},
					vremya = {0,6,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_amk_recipt_power_1"] = {
					komp = {["af_power"]=true,["af_buliz"]=true,["af_blood"]=true,["af_pudd_1"]=true,["af_ameba_slug"]=true},
					cel = {["af_power_1"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["life_heart_final"] = {
					komp = {["af_dummy_dummy"]=true,["af_rusty_sea-urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_life_heart"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				},
				["info_red_battery"] = {
					komp = {["af_dummy_battery"]=true},
					cel = {["af_dummy_battery_red"]=true}
				},
				["info_red_spring"] = {
					komp = {["af_dummy_spring"]=true},
					cel = {["af_dummy_spring_red"]=true}
				},
				["info_red_pellicle"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_dummy_pellicle_red"]=true}
				}
			}
		},
		
		["_sphere"] = {
		name = "\"Пузырь\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["emb8"] = {
					komp = {["mutant_fracture_cocoon"]=true},
					cel = {["mutant_bibliotekar_cocoon"]=true},
					vremya = {0,2,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["emb4"] = {
					komp = {["mutant_poltergeist_cocoon"]=true,["mutant_tarakan2_cocoon"]=true,["part_krovosos_red_jaw"]=true,["part_burer_red_hand"]=true},
					cel = {["mutant_bloodsucker_cocoon"]=true},
					vremya = {0,0,5},
					v_udachi = 100,
					v_virogd = 0
				}
			}				
		},

		["_zavesa"] = {
		name = "\"Tорнадо\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
               },
				["emb17"] = {
					komp = {["mutant_chimera_cocoon"]=true,["mutant_electro_cocoon"]=true,["mutant_kachok_cocoon"]=true,["mutant_ghost_cocoon"]=true},
					cel = {["mutant_x_ray_cocoon"]=true},
					vremya = {0,2,0},
					v_udachi = 100,
					v_virogd = 0
				},
				["fima_mulo_nayti_done"] = {
					komp = {["part_zombie_teeth"]=true,["kolbasa"]=true},
					cel = {["part_rudiment_big"]=true},
					v_udachi = 50,
					v_virogd = 50
				}
			}				
		},

		["_smallrain"] = {
		name = "\"Очаговый туман\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["snp_almaz3"] = {
					komp = {["mutant_mono_cocoon"]=true},
					cel = {["mutant_tm_cocoon"]=true},
					vremya = {0,7,0},
					v_udachi = 100,
					v_virogd = 0
				}
			}				
		},

		["_sakbuzz_average"] = {
			name = "\"Радоново облако\"",
			default = {
				v_udachi = 80,
				v_virogd = 20,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- артефакт удалит аномалиі без результатов варки/мутации
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					v_udachi = 100,
					v_virogd = 0,
					remove_anomaly = true
				},
				["gena_sakharov2_done"] = {
					komp = {["kolba_pustay"]=true,["kolba_siniy_poln"]=true,["kolba_orand_poln"]=true,["kolba_krasn_poln"]=true,["af_black_angel"]=true,["af_arhara_globus"]=true},
					cel = {["kolba_fiol_poln"]=true},
					vremya = {0,0,10},
					v_udachi = 100,
					v_virogd = 0
				}
			}
		}
	}
}

-- возвра ает значение, возможно из умолчаний
function get_af_transform_param(name, recept, recepti)
	local result
	--console:execute("load ~#I#:"..string.format(name.." имя"))
	if recept[name] ~= nil then
		result = recept[name]
	elseif recepti["default"] ~= nil and recepti["default"][name] ~= nil then
		result = recepti["default"][name]
	elseif anom_recept_komp["default"] ~= nil and anom_recept_komp["default"][name] ~= nil then
		result = anom_recept_komp["default"][name]
	else
		amk.send_tip("нет информации для "..name.."!","варка артефактов",0,15,"gen_info")
		result = nil
	end
	return result
end

-- іолучаем полнvй набор рецептов для аномалии anom_sect
function fill_recepti_est(anom_sect)
	local recepti_est = {} -- рецептv для заданной аномалии
	local anom_name = nil
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string.find(anom_sect, anom) ~= nil then --нашли в списке аномалиі.
			anom_name = anom_recept_komp["anomalii"][anom]["name"]
			if anom_recept_komp["anomalii"][anom]["recepti"] then
				for info, recept in pairs(recepti["recepti"]) do
					if not recept["not_for_mutator"] and not recept["remove_anomaly"] and has_info(info) then
						-- есть рецепт: заносим в таблицу
						recepti_est[info] = {}
						for k, v in pairs(recept) do
							if type(v) == "table" then
								recepti_est[info][k] = {}
								for i, j in pairs(v) do
									recepti_est[info][k][i] = j
								end
							else
								recepti_est[info][k] = v
							end
						end
					end
				end
			end
		end
	end
	return recepti_est,anom_name
end

-- проверяет рецептv и компонетv
-- если всї в порядке - запускает варку/мутациі
function check_af_transform(af, af_sect, obj_pos, anom_id, anom_sect, anom_pos, anom_radius, lv, gv)
	local actor = db.actor
	
	--поиск по аномалиям
	local finish = false -- флаг для вvхода из циклов
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string.find(anom_sect, anom) ~= nil then --нашли в списке аномалиі, возле которой стоим
			local recepti_est = {} -- рецептv в наличии у ++, в которvх участвует даннvй компонент
			local recept_podhodit = false
			
			-- собираем рецептv, в которvх участвует даннvй компонент
			for info, recept in pairs(recepti["recepti"]) do
				if actor:has_info(info) and recept["komp"][af_sect] == true then --есть рецепт и этот компонент в нїм участвует
					recept_podhodit = true
					-- копируем рецепт
					recepti_est[info] = {}
					for k, v in pairs(recept) do
						if type(v) == "table" then
							recepti_est[info][k] = {}
							for i, j in pairs(v) do
								recepti_est[info][k][i] = j
							end
						else
							recepti_est[info][k] = v
						end
					end
					-- так как table.getn() как и оператор # не работаіт с таблицами, у которvх не целочисельнvе индексv,
					-- то считаем количество в ручнуі
					local count = 0
					for k,v in pairs(recepti_est[info]["komp"]) do
						count = count + 1
					end
					recepti_est[info]["count"] = count
					--console:execute("load ~#I#:"..string.format("0 "..af_sect.." принят. Lном: "..anom.." рец. "..info.." "..recepti_est[info]["count"]))
				end
			end
			
			if recept_podhodit then -- если нашли хоть один имеющийся подходящий рецепт
				--ищем рядом другие компоненты
				--если находим их в вvбраннvх рецептах, то удаляем их из рецептов
				--как только какой-то рецепт остаїтся без компонентов - рецепт сработал
				local obj
				for i=1,65534 do
					obj = level_object(i)
					if obj and server_object(i) then
						local dist = obj:position():distance_to(anom_pos)
						if obj:parent() == nil and ((anom_radius - obj:position():distance_to(anom_pos)) > -2) then
							local obj_sect = obj:section()
							--console:execute("load ~#I#:"..string.format(" obj_sect: "..obj_sect.." dist: "..dist))
							--проверяем отобраннvе рецептv
							for info, recept in pairs(recepti_est) do
								-- если компонент есть в рецепте
								if recepti_est[info]["komp"][obj_sect] == true then
									-- добавляем L- компонента для буду его удаления из игрv
									recepti_est[info]["komp"][obj_sect] = obj:id()
									-- уменьшаем количество компонентов в рецепте
									recepti_est[info]["count"] = recepti_est[info]["count"] - 1
									--console:execute("load ~#I#:"..string.format(obj_sect.." найден. Lном: "..anom.." рец. "..info.." "..recepti_est[info]["count"]))
									
									-- если рецепт пуст, то он сработал
									if recepti_est[info]["count"] == 0 then
										--console:execute("load ~#I#:"..string.format(info.." сработал. Lном: "..anom))
										
										-- устанавливаем все параметрv для рецепта, возможно из умолчаний
										local cel		= get_af_transform_param("cel", recepti_est[info], recepti)
										local v_udachi		= get_af_transform_param("v_udachi", recepti_est[info], recepti)
										local v_virogd		= get_af_transform_param("v_virogd", recepti_est[info], recepti)
										local virogd		= get_af_transform_param("virogd", recepti_est[info], recepti)
										local vremya		= get_af_transform_param("vremya", recepti_est[info], recepti)
										local remove_anomaly	= get_af_transform_param("remove_anomaly", recepti_est[info], recepti)
										local remove_anomaly_id = anom_id
										local komp		= recepti_est[info]["komp"]
										local result, udacha 	= af_select_result(v_udachi, v_virogd, virogd, cel, komp)
										local info_portion	= recepti_est[info]["info"]
										
										if cel == nil or v_udachi == nil or v_virogd == nil
											or virogd == nil or vremya == nil or remove_anomaly == nil 
											or cel == nil and remove_anomaly == false
											or v_udachi + v_virogd > 100 then
											
											-- кривой рецепт  - вvходим
											finish = true
											break
										end
										
										-- неудача
										if udacha == false then
											remove_anomaly = false
											info_portion = nil
										end

										level.add_pp_effector("teleport.ppe", 1524, false)
										
										-- запускаем варку/мутациі
										as_start_universal_transform_timer(komp, result, udacha, obj_pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
										
										-- удаляем из игрv компонентv рецепта
										give_info("biznes_remove_special_item")
										for k,v in pairs(komp) do
											release(server_object(v))
										end
										disable_info("biznes_remove_special_item")
										
										-- вvходим
										finish = true
										break
									end
								end
							end
						end
					end
					
					if finish then break end
				end
			end
			
			-- аномалия с рецептами найдена, все дела сделанv - вvходим
			break
		end
	end

end

function af_flash(af)
	level.add_pp_effector("teleport.ppe", 1524, false)
	amk.remove_item(af)
end

-- случайно вvбирает результат, возвра ает таблицу с секциями результатов
function af_select_result(v_udachi, v_virogd, virogd, cel, komp)
	local rnd=math.random(0,100)
	if rnd > v_udachi then --неудача
		if rnd > v_virogd + v_udachi then -- отторжение
			return komp, false
		else -- вvрождение
			return virogd, false
		end
	else -- удача
		-- console:execute("load ~#I#:"..string.format("удача "..amk.pack_array_to_string(cel)))
		return cel, true
	end
end

-- запускаем трансофрмациі 
-- результатv могут бvть многочисленнv (несколько целей, полное отторжение компонентов, несколько вvрождений)
function as_start_universal_transform_timer(komp, result, udacha, pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
	local t={} -- сохраняемvе даннvе
	t.result = result -- можно сохранять сразу таблицv
	t.udacha = udacha
	t.pos = {}
		t.pos.x = pos.x
		t.pos.y = pos.y
		t.pos.z = pos.z
	t.gv = gv
	t.lv = lv
	t.info_portion = info_portion
	t.komp = komp -- можно сохранять сразу таблицv
	t.remove_anomaly = remove_anomaly
	t.remove_anomaly_id = remove_anomaly_id
	--console:execute("load ~#I#:"..string.format(" g_start_timer: "..vremya[1].." "..vremya[2].." "..vremya[3].." "..amk.pack_array_to_string(t)))
	amk.g_start_timer("af_transform_universal", vremya[1], vremya[2], vremya[3], t)
end

-- завершаем варку/мутациі
-- может бvть много результатов
function af_transform_universal_end(params)
	--console:execute("load ~#I#:"..string.format(" af_transform_universal_end "))
	-- если есть результатv
	local count = 0
	for k, v in pairs(params.result) do
		count = count + 1
	end
	if count > 0 then
		local anom_pos = vector():set(params.pos.x, params.pos.y, params.pos.z)
		if db.actor:position():distance_to(anom_pos) < 15 then
			level.add_pp_effector("teleport.ppe", 1524, false)
		end
		-- формируем строку с названиями компонентов
		local from_komp = ""
		for k,v in pairs(params.komp) do
			if k then
				from_komp = from_komp..game.translate_string(amk.get_inv_name(k))..", "
			end
		end
		-- отсекаем ", " в хвосте
		from_komp = string.sub(from_komp, 1, -2)
		
		-- спавним результат(v)
		for k,v in pairs(params.result) do
			local obj
			-- спавн поднят на 10 метров, попытка победить проваливание под текстуры
			obj = amk.spawn_item(k, xyz(params.pos.x,params.pos.y+10,params.pos.z), params.gv, params.lv) 
			amk.add_spot_on_map(obj.id, "red_location", game.translate_string("trans_finished_title").." из %c[255,255,0,0]"..from_komp)
			if params.udacha and string.find(k, "^af_") then
				archievements.acv_count_event("acv_art", 100, "Сварщик")
			end
		end
	
		amk.send_tip(game.translate_string("trans_finished_title").." из %c[255,255,0,0]"..from_komp)
	end
	
	-- даїм инфопорциі, если есть
	if params.info_portion and dont_has_info(params.info_portion) then
		--console:execute("load ~#I#: params.info_portion: "..params.info_portion)
		give_info(params.info_portion)
	end
	
	-- удаляем аномалии, если нужно и она не в исклічениях
	if params.remove_anomaly then
		local sobj = server_object(params.remove_anomaly_id)
		if sobj then
			local map = object_level_name(sobj)
			local obj_name = sobj:name()
			if not amk_anoms.check_exclusion(sobj, map) then 
				local status = amk_anoms.get_anomaly_status(sobj)
				if status == "" or status == "on" then
					amk_anoms.set_anomaly_status(sobj, "del")
					release(sobj, true)
				end
			end
		end
	end
--[[	console:execute("load ~#I#:"..string.format(" варка закончена "))
	console:execute("flush")]]
end

-- Метка
function check_beacon_drop(obj)
	if obj:section() == "amk_metka" and not has_info("biznes_remove_special_item") then
		amk.start_timer("check_metka",0.2,obj:id())
	end
end

function check_metka(id)
	local obj = level_object(id)
	if obj and obj:parent() == nil then
		level.start_stop_menu(ui_dots.dots(id), true)
	end
end

-- Динамическая музыка
local last_update=0 
local inert = 1000 
local clicks_prev = 200 
local music_section="" 
local music_previous_section="" 
local music_next_section_start_time=0 
local music_stop_previous=0 
local music=false 
local music_init = 0 
local music_themes = {} 
local music_phases={} 
local musicflag=1 
local music_objs={[1] = nil,[2] = nil} 
local music_stor={ enemy_see_actor=0, actor_see_enemy=0, enemy_hit_actor=0, actor_hit_enemy=0 }
music_lo_lvl=7
music_hi_lvl=17 
local music_graph = {}  

function build_music_graph() 
	local skip = false
	local lname = level.name()

	local sect = "music_themes"
	local sini = ini_file("scripts\\amk\\music.ltx") 
	if sini:section_exist(sect) then
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count(sect)-1 do
			result, id, value = sini:r_line(sect,a,"","")
			if id ~= nil and string.trim(id) ~= "" and string.trim(id) ~= nil then
				id = string.trim(id)
				value1 = string.explode(string.trim(value), "|", true)
				value = {}
				
				for k,v in pairs(value1) do 
					local tmp = string.explode(v, "=", true)
					value[tmp[1]] = tmp[2]
				end 
				
				if value.map then 
					local t = string.explode(value.map, ",", true)
					for kk,vv in pairs(t)do
						skip = skip or vv == lname
					end
					skip = not skip
				else
					skip = false
				end
				
				if not skip then 
					table.insert(music_themes, id)
					local t = amk.parse_ini_section_to_array(sini,id.."_music_files")
					t.null = ""
					for k,v in pairs(t) do
						music_phases[id.."_"..k]=v 
						if not music_graph[id.."_"..k] then
							music_graph[id.."_"..k] = {}
						end 
						local tt = amk.parse_ini_section_to_array(sini,id.."_graph_"..k)
						for kk,vv in pairs(tt) do 
							local tmp = string.explode(vv, ",", true) 
							local lvl = tmp[1]
							lvl = amk_mod["music_"..lvl.."_lvl"]
							music_graph[id.."_"..k][id.."_"..kk] = {lvl,tmp[2]}
						end
					end
				end
			end
		end 
		
		if #music_themes > 0 then
			return true
		else
			return false
		end
	end
	
	return false
end  

function music_start(sound) 
	if not music then 
		if music_objs[1] == nil then
			music_objs[1] = amk_music.amk_music()
		end 
		if music_objs[2] == nil then
			music_objs[2] = amk_music.amk_music()
		end
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play()-200
		music_previous_section = music_section
		musicflag = 3-musicflag
	end
	
	music = true
end  

function music_change(sound) 
	if music then
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time = music_objs[musicflag]:play_at_time(music_next_section_start_time+200)-200
		musicflag=3-musicflag music_previous_section=music_section
	end
end  

function interactive_music()
	amk.oau_reason="music begin"

	if amk.load_variable("option_mus",0) == 0 then return end 
	if music_init == -1 then return end 
	if music_init == 0 then 
		if build_music_graph() then 
			music_init = 1
		else
			music_init = -1
			return
		end
	end 
	if not music then 
		if time_global() - last_update > inert then
			music_select_section(inert) last_update = time_global()
		end
	end 
	if not music and music_previous_section == "" and music_section ~= "" then
		music_start(music_section)
	end 
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end 
	if music then
		music_objs[1]:update() music_objs[2]:update() 
		if time_global() > music_next_section_start_time then
			music_select_section(music_objs[musicflag]:length()) 
			if music_section ~= "" then
				music_change(music_section)
			else
				music = false
			end
		end
	end

	amk.oau_reason=""
end  

function reset_music_cntrs(c)
	music_stor.actor_see_enemy = music_stor.actor_see_enemy-2*c
	music_stor.enemy_see_actor = music_stor.enemy_see_actor-2*c
	music_stor.actor_hit_enemy = music_stor.actor_hit_enemy-8*c
	music_stor.enemy_hit_actor = music_stor.enemy_hit_actor-4*c
	if music_stor.actor_see_enemy < 0 then
		music_stor.actor_see_enemy = 0
	elseif music_stor.actor_see_enemy > music_lo_lvl then
		music_stor.actor_see_enemy = music_lo_lvl
	end 
	if music_stor.enemy_see_actor < 0 then
		music_stor.enemy_see_actor = 0
	elseif music_stor.enemy_see_actor > music_lo_lvl then
		music_stor.enemy_see_actor = music_lo_lvl
	end 
	if music_stor.actor_hit_enemy < 0 then
		music_stor.actor_hit_enemy = 0
	elseif music_stor.actor_hit_enemy > music_hi_lvl then
		music_stor.actor_hit_enemy = music_hi_lvl
	end 
	if music_stor.enemy_hit_actor < 0 then
		music_stor.enemy_hit_actor = 0
	elseif music_stor.enemy_hit_actor > music_hi_lvl then
		music_stor.enemy_hit_actor = music_hi_lvl
	end
end 

local shoot_helper = 0  

function calc_adrenaline(act,obj,typ) 
	local dist = obj:position():distance_to(db.actor:position()) 

	if act == "actor_see_enemy" then
		music_stor.actor_see_enemy = music_stor.actor_see_enemy+50/dist
	elseif act == "enemy_see_actor" then
		music_stor.enemy_see_actor = music_stor.enemy_see_actor+50/dist
	elseif act == "actor_hit_enemy" then 
		if time_global() > shoot_helper then
			music_stor.actor_hit_enemy = music_stor.actor_hit_enemy+13
			shoot_helper = time_global()+500
		end
	elseif act == "enemy_hit_actor" then
		music_stor.enemy_hit_actor = music_stor.enemy_hit_actor+8
	end
end  

function music_select_section(time)
	reset_music_cntrs(time/inert) 
	
	local cs = music_section 
	local eseen = music_stor.enemy_see_actor 
	if eseen >= music_lo_lvl then
		eseen = music_lo_lvl
	end 
	local aseen = music_stor.actor_see_enemy 
	if aseen >= music_lo_lvl then
		aseen = music_lo_lvl
	end 
	local ehits = music_stor.enemy_hit_actor 
	if ehits >= music_hi_lvl then
		ehits = music_hi_lvl
	end 
	local ahits = music_stor.actor_hit_enemy 
	if ahits >= music_hi_lvl then
		ahits = music_hi_lvl
	end 

	local lvl = aseen+eseen 
	if lvl > music_hi_lvl*0.75 then
		lvl = music_hi_lvl*0.75
	end
	lvl = ehits+lvl+ahits 

	if music_section == "" then
		music_section = music_themes[math.random(#music_themes)].."_null"
	end 

	local last_sel_max = 0 
	local last_sel_min = 1000
	for k,v in pairs(music_graph[music_section]) do 
		if v[2] == "<" and v[1] < last_sel_min then 
			if v[1] > lvl then
				music_section=k
				last_sel_min=v[1]
			end
		end 
		if v[2] == ">" and v[1] >= last_sel_max then 
			if v[1] <= lvl then
				music_section = k
				last_sel_max = v[1]
			end
		end
	end 
	
	if string.find(music_section,"null") then
		music_section = ""
	end 
	if music and music_previous_section ~= "" and music_section == "" then
		music_previous_section = ""
	end 
	
	local l = 0 
	if music and music_objs[musicflag] ~= nil then
		l = music_objs[musicflag]:length()
	end
end  

-- Выброс
function blowout_phantoms()
	local blow = amk.load_variable("blowout",-1)
	local bt = blowout_type()
	if blow > 1 and blow < 4 and bt < 2 then
	  local lname = level.name()
		if not in_hide and amk_hideouts.blowouts_phantoms[lname] then
			local phantoms = amk_hideouts.blowouts_phantoms[lname]
			if phantoms and phantoms.count > 0 then
				if math.random() < phantoms.probability then
					if phantom_manager:phantom_count() < phantoms.count then
						local yaw = math.pi*2.0*math.random()
						local radius = phantoms.radius*(math.random()/2.0+0.5)
						local height = phantoms.height*math.random()
						local a_pos = db.actor:position()
						local pos = vector():set(math.sin(yaw)*radius+a_pos.x,a_pos.y+height,math.cos(yaw)*radius+a_pos.z)
						phantom_manager.spawn_phantom(pos)
					end
				end
			end
		end
	end
end

function blowout_scary_sounds()
	local blow = amk.load_variable("blowout",-1)
	if blow > 0 and blow < 4 then
		local snd_obj = voice(amk_hideouts.blowout_sounds[math.random(#amk_hideouts.blowout_sounds)])
		local a = vector()
		a.x = math.random(0,10)
		a.y = math.random(0,10)
		a.z = math.random(0,10)
		snd_obj:play_at_pos(db.actor, db.actor:position():add(a))
		amk.start_timer("blowout_ss",math.random(10,30),0)
	end
end

function blowout_psy_sound(action)
	if action == "start" then
		snd_obj_eq = sound_object([[ambient\earthquake]],sound_object.looped+sound_object.s2d)
		snd_obj_eq:play(db.actor, 4, sound_object.looped+sound_object.s2d)
	end
	if action == "stop" then
		if snd_obj_eq then
			snd_obj_eq:stop()
		end
	end
	
	local lname = level.name()
	if not amk_hideouts.blowouts_phantoms[lname] then return end
	local psy_sound = amk_hideouts.blowouts_phantoms[lname].psy_sounds or false	
	if not psy_sound then return end

	if action == "start" then
		local level_vol = amk_hideouts.blowouts_phantoms[lname].level_vol or 1				
		sound_obj_right, sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
		sound_obj_left:play_at_pos (db.actor, xyz(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		sound_obj_right:play_at_pos(db.actor, xyz( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		snd_volume	= level.get_snd_volume()
		level.set_snd_volume(level_vol)
	end
	if action == "stop" then
		if sound_obj_left then sound_obj_left:stop() end
		if sound_obj_right then sound_obj_right:stop() end
		if snd_volume then level.set_snd_volume(snd_volume) end
	end	
end

function Run_Blowout_pp()
	if game_options.run_blowout_pp == 1 then
		local bt = blowout_type()
		if bt == 2 then
			start_blow_timer()
			return
		end
		
		sleep_manager.stopper()
		amk.save_variable("blowout",1)
		
		if bt < 1 then
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
			say([[ambient\organic_moan1]])
		end
		amk.start_timer("blowout_ss",math.random(5,15),0)
		amk.start_timer("blowout",11,0)
		blowout_modif_arts()
	end
	start_blow_timer()
end

function start_blow_timer()
	local basis = game_options.blow_time_basis
	local shift = game_options.blow_time_shift
	local resuls = basis+math.random(-shift, shift)
	amk.g_start_timer("blow_shift", 0, 0, resuls)
	news_main.next_blow(resuls)
end

function Blowout_pp(phase)
	--' TimeFactor = 5
	--' GameMin = 12 RealSec
	--' TimeBlowout = 184 RealSec

	--' начало (Timer = 36 sec)
	--' первая фаза (Timer = 36 sec)
	--' вторая фаза (Timer = 36 sec)
	--' Tретья фаза (Timer = 36 sec)
	--' четвертая фаза (Timer = 60 sec)
	--' конечная фаза (Timer = 0 sec)

	local basis = game_options.blow_phase_basis
	local shift = game_options.blow_phase_shift
	local max = game_options.blow_phase_max
	local resuls = basis+(math.random()*shift)-(shift/2)
	if resuls < 1 then
		resuls = 1
	elseif resuls > max then
		resuls = max
	end
	
	local blow = amk.load_variable("blowout", 0)
	local bt = blowout_type()
	if blow > 0 and blow < 4 and bt == 2 then
		amk.g_start_timer("blowout", 0, 0, 3, 4)
	end

	if phase == 0 then
		db.actor.blowout_outside = true
		amk_anoms.pre_blow_off()

		if bt < 1 then
			level.set_weather("pre_blow",true)
			level.set_weather_fx("amk_surge_day")
		end 
		amk.g_start_timer("blowout", 0, 0, resuls, 1)
		
	elseif phase == 1 then
		say([[ambient\earthquake]])
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		say([[anomaly\blowout]])
		blowout_psy_sound("start")
		
		if bt < 1 then
			level.add_pp_effector("vibros.ppe", 2001, true)
		end
		in_hide = false
		
		amk.g_start_timer("blowout", 0, 0, resuls, 2)
		amk.save_variable("blowout",2)	
		
	elseif phase == 2 then
		amk.g_start_timer("blowout",0,0,3,3)
		
	elseif phase == 3 then
		amk_anoms.after_blow_on()
		amk.save_variable("blowout",3)
		
		local h = hit()
		local cr
		h.type = hit.strike
		h.power = 1000
		h.impulse = 1000
		for a = 1,65534,1 do
			cr = level_object(a)
			if cr ~= nil and cr:section() == "m_crow" and math.random(0,100) < 30 then
				h.draftsman = cr
				h.direction = cr:direction()
				cr:hit(h)
			end
		end
		
		amk.g_start_timer("blowout", 0, 0, resuls, 4)
		
	elseif phase == 4 then
		amk.save_variable("blowout",4)
		level.remove_cam_effector(2002)
		
		if bt < 1 then
			level.remove_pp_effector(2001)
			level.add_pp_effector("monolith_off.ppe", 2003, false)
		end
		
		blowout_psy_sound("stop")
		amk.start_timer("blowout",5,5)
		
	elseif phase == 5 then
		level.set_weather(amk.load_variable("weather","default1"),true)
		if bt < 1 then
			say([[anomaly\teleport_work2]])
		end
		
		amk.del_variable("blowout")
        if game_options.zombie_team == 1 then
            tag_spb.zombie_team()
        end
		if db.actor.blowout_outside then
			archievements.acv_count_event("acv_blow", 5, "Выброшенный")
			db.actor.blowout_outside = nil
		end
   		amk.start_timer("autosave_blowout", 10, "") -- autosave
	end
end

function on_blowout_hit(npc, hide)
	local bt = blowout_type()
	if bt > 0 or amk.load_variable("blowout",-1) ~= 3 then 
		if npc:id() == db.actor:id() then
			in_hide = true
		end
		return false
	end
	
	local lname = level.name()
	local need_hit = true
	local khit = 1
	if hide and hide.zone then
		need_hit = not check_npc_in_hideout(npc, hide)
		if not need_hit then
			if hide.defence then 
				khit = hide.defence
			else
				khit = 0
			end
		end
	else
		local hides = amk_hideouts.hide[lname]
		local tmp
		if hides then
			for i,o in ipairs(hides) do
				if o.zone then
					for j,v in ipairs(o.zone) do
						if v.p3 then
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
						else
							tmp=amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
						end
						need_hit = need_hit and not tmp
						if tmp then
							if o.defence then 
								khit = o.defence
							else
								khit = 0
							end
						end
					end
				end
			end
		end
	end

    if npc:id() == db.actor:id() then
		if not need_hit then
			db.actor.blowout_outside = nil
		end
		if outfit_hideout() then -- защита от выброса броником
			need_hit = false
			khit = 0
		else
			khit = khit+khit*level.get_game_difficulty()/6	-- усиление хита для актора, чтобы вне укрытия не пережил
		end
		in_hide = not need_hit
	end
    if (need_hit or khit > 0) and amk.load_variable("blowout",-1) == 3 and not (hide and hide.hidden) then
		local h = hit()
    	h.power = (amk_hideouts.blowout_damages[lname] or 0.01)*khit
    	h.impulse = 0
		h.draftsman = npc
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine") -- чтобv учитvвалась броня
    	h.type = hit.strike
		npc:hit(h)
    	h.type = hit.telepatic
		npc:hit(h)
    	h.type = hit.radiation
		npc:hit(h)
    end
    return need_hit or khit > 0
end

function outfit_hideout()
	local outfits = {
		["gagarin_outfit"] = true,
		["gagarin_outfit_m1"] = true,
		["voshod_outfit"] = true,
		["exo_knight_outfit"] = true
	}
	return db.actor:item_in_slot(6) and outfits[db.actor:item_in_slot(6):section()]
end

function check_npc_in_hideout(npc, hide)
	local not_in_zone = true
	if hide and hide.zone then
		for k,v in pairs(hide.zone) do
			if v.p3 then 
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
			else
				not_in_zone = not_in_zone and not amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
			end
		end
	end
	return not not_in_zone
end

function blowout_modif_arts()
	local arts = {
		["af_cry_2"] = true,
		["af_cry_3"] = true,
		["af_babka_3"] = true,
		["af_babka_4"] = true,
		["af_dik_3"] = true,
		["af_dik_4"] = true,
		["af_spirit_3"] = true,
		["af_spirit_4"] = true,
		["af_armor_3"] = true,
		["af_armor_4"] = true,
		["af_pudd_3"] = true,
		["af_pudd_4"] = true,
		["af_kol_3"] = true,
		["af_kol_4"] = true,
		["af_caterpillar"] = true,
		["af_simbion"] = true,
		["af_dummy_battery_red"] = true,
		["af_dummy_spring_red"] = true,
		["af_dummy_pellicle_red"] = true,
	}
	
	local obj
	for i=1,65534 do
		obj = server_object(i)
		if obj and arts[obj:section_name()] and math.random() < 0.05 then
			if obj.parent_id == 65535 then
				create("af_buliz", obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id)
			else
				create("af_buliz", obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.parent_id)
			end
			release(obj)
		end
	end
end

-- Спавн аномалий
local anomalies_state = {}

function remove_anoms()
	amk.save_variable("blowout_anoms",string.rep(string.char(128),math.ceil(amk_hideouts.anom_count/7)))
	update_anoms()
end

function create_anoms()
	anomalies_state = {}
	for i = amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		anomalies_state[i] = math.random(0,1) == 1
	end
	local str = pack_anoms(anomalies_state)
	amk.save_variable("blowout_anoms",str)
	update_anoms()
end

function update_anoms()
	local anoms = amk.load_variable("blowout_anoms",string.rep(string.char(128),math.ceil(amk_hideouts.anom_count/7)))
	anomalies_state = unpack_anoms(anoms)
	for i = amk_hideouts.anom_sid0,amk_hideouts.anom_sid0+amk_hideouts.anom_count-1,1 do
		local sobj = story_object(i)
		if sobj then
			local obj = level_object(sobj.id)
			if obj then
				if anomalies_state[i] then
					obj:enable_anomaly()
				else
					obj:disable_anomaly()
				end
			end
		end
    end
end

-- anom_state[sid]==true для активнvх аномалий
function pack_anoms(anom_state)
	local str = ""
	for i = 0,amk_hideouts.anom_count-1,7 do
		local cval = 128
		local mul = 1
		for j = 0,6,1 do
			if anom_state[i+j+amk_hideouts.anom_sid0] then
				cval = cval+mul
			end
		mul = mul*2
		end
		str = str..string.char(cval)
	end
	return str
end

function unpack_anoms(str)
	local anom = {}
	for i = 1,string.len(str),1 do
		local cval = string.byte(string.sub(str,i,i))
		local mul = 1
		for j = 0,6,1 do
			anom[(i-1)*7+j+amk_hideouts.anom_sid0] = bit_and(mul,cval) ~= 0
			mul = mul*2
		end
	end
	return anom
end

function blowout_type()
	local lname = level.name()
	local blow_type = amk_hideouts.blowout_types[lname]
	return blow_type or 0
end

-- Получение рецептов
function check_usable_item(obj)
	local info = nil
	if obj:section() == "vehicle_btr" then
		db.actor:kill(db.actor)
	elseif obj:section() == "turret_to_strelok" then
		release(obj,true)
		got("strelok_turret")
	end

	if obj:name() == "mil_stalker0012" then
		info = "info_amk_recipt_stone_dikoobraz"
	elseif level.name() == "l01_escape" and obj:section() == "amk_zapiska" then
		info = "info_amk_recipt_shkura"
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
	elseif level.name() == "l04u_labx18" and obj:section() == "amk_zapiska" then
		info = "info_amk_recipt_simbion"
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
	elseif level.name() == "l08u_brainlab" and obj:section() == "amk_zapiska" then
		local infos = {"info_amk_recipt_dummy_fire"}
		amk.drop_item(db.actor,obj)
		amk.remove_item(obj)
		local info_given = false
		for i=1,#infos do
			local inf = infos[i]
			if dont_has_info(inf) then
				give_info(inf)
				info_given = true
			end
		end
		if info_given then
			amk_dialogs.info_received()
		end
		return
	else
		local recipes = amk.load_table("amk_body_recipe")
		info = recipes[obj:id()]
	end  

	if info == nil or has_info(info) then
		return
	end
	
	give_info(info)
	amk_dialogs.info_received()
end

function generate_recipe(obj)
	local info = nil
	local prop = 100
	
	if level.name() == "l07_military" and obj.character_community and
        obj:character_community() == "killer" then
		info = "info_amk_recipt_titan_kolobok"
		prob = 30
	elseif (level.name() == "l10_radar" or level.name() == "l11_pripyat") and obj.character_community and
        obj:character_community() == "monolith" then
		info = "info_amk_recipt_controller_skalp"
		prob = 30  
	end
	if not info then return end
	
	local recipes = amk.load_table("amk_body_recipe")
	-- іроверим не генерился ли уже этот рецепт
	for k,v in pairs(recipes) do
		if v == info then return end
	end
	-- Tгенерим рецепт
	if math.random(100) <= prob then
		recipes[obj:id()] = info
		amk.save_table("amk_body_recipe",recipes)
	end
end

-- Спавн с НИ
function spawn_fuel()
	local ballons = {
		{108.16, -6.30, -18.17, 412158, 115},
		{370.12, 15.06, -39.48, 594401, 0},
		{58.30, 19.36, 156.50, 345136, 97},
		{-92.21, -1.18, -212.66, 115177, 268},
		{-74.17, 1.80, 8.45, 127766, 329},
		{3.18, 1.24, 42.48, 243919, 490},
		{15.35, -1.90, 2.40, 255433, 479},
		{77.54, 0.30, -108.47, 312366, 427},
		{-145.54, -0.00, -199.61, 92520, 650},
		{-130.08, 10.00, -196.67, 109214, 629},
		{-140.13, 10.00, -197.94, 98647, 629},
		{37.28, 1.02, -49.90, 220638, 1084},
		{476.68, -46.94, -0.23, 155714, 1919},
		{76.80, -2.54, -23.93, 36304, 1970},
		{94.78, 0.03, -6.88, 88986, 1514},
		{-3.24, -11.75, -263.07, 33794, 1448}
	}
	local kanisters = {
		{-293.80, -14.18, -15.36, 15703, 67},
		{-16.57, 2.48, 58.82, 260308, 88},
		{-74.81, -1.30, 160.52, 196218, 163},
		{-69.94, 0.97, 6.51, 131411, 329},
		{64.01, 0.60, 148.46, 235341, 364},
		{63.29, -0.20, 5.10, 299326, 461},
		{-28.52, -1.04, -181.84, 211644, 676},
		{2.93, -1.88, -13.30, 176553, 1047},
		{41.71, 4.54, -86.36, 227110, 1100},
		{7.90, 1.41, -71.93, 183138, 1041},
		{158.71, -0.76, -259.73, 358950, 962},
		{-342.92, -13.60, 390.01, 11235, 1847},
		{305.22, -36.99, -24.40, 68330, 1930},
		{55.02, 1.17, 40.35, 68094, 1511},
		{-114.14, -0.00, 121.75, 43453, 1315},
		{31.33, 5.60, -13.51, 4683, 1538}
	}
	for k,v in pairs(ballons) do
		if #v == 5 then
			create("amk_ballon",xyz(v[1], v[2], v[3]), v[4], v[5])
		end
	end
	for k,v in pairs(kanisters) do
		if #v == 5 then
			create("amk_kanistra",xyz(v[1], v[2], v[3]), v[4], v[5])
		end
	end
end

-- БТР на блокпосту
function spawn_military_btr()
	spawn_military_tech_pack( create("vehicle_btr",xyz(-168.11, -29.71, -303.21),81808,38 ) ,"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
	spawn_military_tech_pack( create("vehicle_btr",xyz(-237.85, -26.23, -378.81),17147,14 ) ,"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
	spawn_military_tech_pack( create("helicopter",xyz(-150.0,-40.0,-620.0),128298,11 ) ,"helicopter", "scripts\\esc\\esc_blockpost_heli.ltx")
--	spawn_military_tech_pack( create("vehicle_btr",xyz(-189.55,-0.24,-140.49),46901,559),"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
--	spawn_military_tech_pack( create("vehicle_btr",xyz(-93.81,0,-185.82),146369,607),"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
--  spawn_military_tech_pack( create("vehicle_btr",xyz(-135.49, -30.13, -375.27),115062,20 ) ,"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
--  spawn_military_tech_pack( create("vehicle_btr",xyz(-167.58, -29.48, -364.26),82401,31 ) ,"vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
end

function spawn_military_tech_pack(obj, spawn_item, spawn_item_logic)	
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		-- свойства cse_motion
		motion_name = packet:r_stringZ()
	end

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health 
	local cse_alife_helicopter__unk1_sz 
	local engine_sound 
		
	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()
		engine_sound = packet:r_stringZ()
	elseif (spawn_item == "vehicle_btr" or spawn_item == "auto_turret_1" or spawn_item == "auto_turret_2" or spawn_item == "turret_to_strelok" or spawn_item == "vehicle_shilka" or spawn_item == "vehicle_apc") then
		health = packet:r_float()
	end
	
	-- теперь заполняем нужнvе параметрv
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	
	packet:w_stringZ("[logic]\ncfg = "..spawn_item_logic)
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	
	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)		
	end 
	
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "alexmx\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif (spawn_item == "vehicle_btr" or spawn_item == "auto_turret_1" or spawn_item == "auto_turret_2" or spawn_item == "turret_to_strelok" or spawn_item == "vehicle_shilka" or spawn_item == "vehicle_apc") then
		health = 1
		packet:w_float(health)
	end	
	-- считvваем скорректированнvе параметрv
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
	
	return obj
end

-- Респавнеры  АМК
function switch_monster_online(obj)
	se_monster.need_be_online[obj.id]=true
end

function switch_monster_offline(obj)
	se_monster.need_be_online[obj.id]=false
end

function respawned(obj,respawner)
	if obj and (IAmAMonster[obj:clsid()] or IAmAStalker[obj:clsid()]) then
		local sini = respawner:spawn_ini()
		if sini:line_exist ("respawn", "creature_binded_logic") == true then
			local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
			netpacket:modify(obj, "custom_data", "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx")
		end
	end	
end

local respawners={}

function spawn_unspawned_respawners()
	for a=1,65534 do
		local obj = server_object(a)
		if obj then
			local oini = obj:spawn_ini()
			if oini:line_exist ("respawn", "amk_name") == true then
				local amk_name = utils.cfg_get_string(oini, "respawn", "amk_name", false, false, false, false)
				if amk_name then respawners[amk_name]=true end
			end
		end
	end

	local sini = ini_file("scripts\\amk\\amk_respawns.ltx")
	local dv = {}
	if sini:section_exist("default_values") then
		local result, id, value = nil, nil, nil
		for a = 0,sini:line_count("default_values")-1 do
			result, id, value = sini:r_line("default_values",a,"","")
			if id ~= nil and string.trim(id) ~= "" and string.trim(id) ~= nil then
				dv[string.trim(id)] = string.trim(value)
			end
		end
	end

	if sini:section_exist("amk_respawns") then
		local tmp = {}
		local result, id, value = nil, nil, nil
		for a = 0,sini:line_count("amk_respawns")-1 do
			result, id, value = sini:r_line("amk_respawns",a,"","")
			if id ~= nil and string.trim(id) ~= "" and string.trim(id) ~= nil then
				table.insert(tmp, string.trim(id))
			end
		end
		
		for k,v in pairs(tmp) do
			local flag = utils.cfg_get_bool(sini, "amk_respawns", v, nil, false, false)
			if not respawners[v] and flag == true then
				local t = amk.parse_ini_section_to_array(sini, v)
				local xyzlg = string.explode(t.xyzlg, ",", true)
				local pos = vector():set(tonumber(xyzlg[1]),tonumber(xyzlg[2]),tonumber(xyzlg[3]))
				local respawner = amk.spawn_item("respawn",pos,tonumber(xyzlg[5]),tonumber(xyzlg[4]))
				local tbl = netpacket:get(respawner)
				t.xyzlg = nil
				t.amk_name = v

				for kkk,vvv in pairs(dv) do
					if t[kkk] == nil then
						t[kkk] = vvv
					end
				end

				tbl.custom_data:setTable({respawn=t})
				netpacket:set(tbl, respawner)
				se_respawn.reinit_spawner_params(respawner:name())
			end
			if flag == false then
				local o = se_respawn.get_respawner_by_name(v)
				if o then
					release(o)
				end
			end
		end
	end
end

-- Прочее
local last_armor_id = 0
local last_condition = 0

function repair_armor(val)
	local armor = db.actor:item_in_slot(6)
	if armor then
		last_armor_id = armor:id()
		last_condition = val
		armor:set_condition(val)
	end
end

function check_armor()
	local armor = db.actor:item_in_slot(6)
	local weapon = db.actor:item_in_slot(2)
	
	if db.actor:active_slot() == 2 and weapon then
		local tmp
		if armor then 
			tmp = armor:section()
		else
			tmp = "none"
		end

		if (not string.find(tmp, "exo")) and weapon:section() == "wpn_m_134" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_m_134")
			db.actor:transfer_item(weapon,db.actor)
			release(tmpw)
			sms(game.translate_string("wpn-m_134-no_exo_message"), nil, "nano", 5000)
		end
		if (not string.find(tmp, "exo")) and weapon:section() == "wpn_m_134_baty" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_m_134_baty")
			db.actor:transfer_item(weapon,db.actor)
			release(tmpw)
			sms(game.translate_string("wpn-m_134-no_exo_message"), nil, "nano", 5000)
		end
		if (not string.find(tmp, "exo")) and weapon:section() == "wpn_m134" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_m134")
			db.actor:transfer_item(weapon,db.actor)
			release(tmpw)
			sms(game.translate_string("wpn-m_134-no_exo_message"), nil, "nano", 5000)
		end
		if (not string.find(tmp, "exo")) and weapon:section() == "wpn_kord" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_kord")
			db.actor:transfer_item(weapon,db.actor)
			release(tmpw)
			sms(game.translate_string("wpn-m_134-no_exo_message"), nil, "nano", 5000)
		end
		if (not string.find(tmp, "exo")) and weapon:section() == "wpn_kord_m1" then 
			db.actor:drop_item(weapon)
			local tmpw = amk.spawn_item_in_inv("wpn_kord_m1")
			db.actor:transfer_item(weapon,db.actor)
			release(tmpw)
			sms(game.translate_string("wpn-m_134-no_exo_message"), nil, "nano", 5000)
		end
	end
	
	if not armor then
		last_armor_id = 0
		return
	end
	if armor:id() ~= last_armor_id then
		last_armor_id = armor:id()
		last_condition = armor:condition()
		return
	end
	if last_condition < armor:condition() then
		armor:set_condition(last_condition)
	else
		last_condition = armor:condition()
	end
end

btrs_friends = {}

function build_btrs_table(obj)
	if obj and (IAmAStalker[obj:clsid()] and obj:character_community()=="military" and obj:alive()) or obj:section()=="vehicle_btr" then
		btrs_friends[obj:id()] = obj:section()
	end
end

function zomby_blow(obj)
	if obj:section() == "zombie_blow" or obj:section() == "zombie_beee" or obj:section() == "zombie_hell" or obj:section() == "zombie_hospital1" or obj:section() == "zombie_hospital2" or obj:section() == "zombie_hospital3" then
		amk_particle.amk_particle({
			particle = "monsters\\polter_death_00",
			pos = obj:bone_position("bip01_head"),
			sound = "anomaly\\anomaly_gravy_hit1"
		})
		
		local dist = db.actor:position():distance_to(obj:position())
		if dist < 20 and db.actor:see(obj) then
			local h = hit()
			h.impulse = 0
			h.draftsman = db.actor
			h.direction = vector():set(0,0,0)
			h:bone("bip01_spine")
			h.power = 1/dist
			h.type = hit.burn
			db.actor:hit(h)
			h.power = 15/dist
			h.type = hit.burn
			db.actor:hit(h)
			
--            level.add_pp_effector("amk_shoot.ppe", 2016, false)
            say([[monsters\zombie\zombie_take_damage_]]..tostring(math.random(1,6)))
			release(server_object(obj:id()))
		end
	end
end
